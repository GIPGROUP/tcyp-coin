const express = require('express');
const { authenticateToken } = require('../middleware/auth');

// –í—ã–±–∏—Ä–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –ë–î –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–∫—Ä—É–∂–µ–Ω–∏—è
const isProduction = process.env.NODE_ENV === 'production';
const { dbAll } = isProduction 
  ? require('../database/db-postgres')
  : require('../database/db');

const router = express.Router();

// –ü–æ–ª—É—á–∏—Ç—å –æ–±—â—É—é –∏—Å—Ç–æ—Ä–∏—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π (–¥–ª—è –æ–±—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã)
router.get('/general', authenticateToken, async (req, res) => {
    try {
        const isPostgreSQL = process.env.NODE_ENV === 'production' && process.env.DATABASE_URL;
        const transactions = await dbAll(`
            SELECT 
                t.*,
                u.full_name as user_name,
                ${isPostgreSQL 
                    ? `SPLIT_PART(u.full_name, ' ', 1) || ' ' || LEFT(SPLIT_PART(u.full_name, ' ', 2), 1) || '.' as short_name`
                    : `SUBSTR(u.full_name, 1, INSTR(u.full_name || ' ', ' ') - 1) || ' ' || SUBSTR(u.full_name, INSTR(u.full_name, ' ') + 1, 1) || '.' as short_name`
                }
            FROM transactions t
            JOIN users u ON ${isPostgreSQL ? 't.to_user_id' : 't.user_id'} = u.id
            ORDER BY t.created_at DESC
            LIMIT 20
        `);

        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        const formattedTransactions = transactions.map(t => ({
            id: t.id,
            user: t.short_name,
            description: t.description,
            amount: t.amount,
            date: new Date(t.created_at).toLocaleString('ru-RU'),
            type: t.amount > 0 ? (t.type === 'lottery' ? 'lottery' : 'earn') : 'spend'
        }));

        res.json(formattedTransactions);
    } catch (error) {
        console.error('Error getting general transactions:', error);
        res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π' });
    }
});

// –ü–æ–ª—É—á–∏—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
router.get('/stats', authenticateToken, async (req, res) => {
    try {
        const stats = await dbAll(`
            SELECT
                (SELECT COALESCE(SUM(amount), 0) FROM transactions WHERE amount > 0) as "totalEarned",
                (SELECT COALESCE(ABS(SUM(amount)), 0) FROM transactions WHERE amount < 0) as "totalSpent",
                (SELECT COUNT(*) FROM users WHERE is_active = true) as "totalEmployees",
                (SELECT COUNT(*) FROM transactions) as "totalTransactions"
        `);

        res.json(stats[0]);
    } catch (error) {
        console.error('Error getting stats:', error);
        res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏' });
    }
});

// –ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ç–∞–ª–æ–≥ –Ω–∞–≥—Ä–∞–¥
router.get('/rewards', authenticateToken, async (req, res) => {
    const rewards = {
        merchandise: [
            { id: 1, name: '–§—É—Ç–±–æ–ª–∫–∞ —Å –ª–æ–≥–æ—Ç–∏–ø–æ–º', price: 7500, emoji: 'üëï' },
            { id: 2, name: '–•—É–¥–∏ —Å –ª–æ–≥–æ—Ç–∏–ø–æ–º', price: 11000, emoji: 'üëò' },
            { id: 3, name: '–†—É—á–∫–∞ —Å –≥—Ä–∞–≤–∏—Ä–æ–≤–∫–æ–π', price: 5000, emoji: '‚úíÔ∏è' },
            { id: 4, name: '–ë—Ä–µ–Ω–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –±—Ä–µ–ª–æ–∫', price: 3000, emoji: 'üîë' },
            { id: 5, name: '–ó–Ω–∞—á–æ–∫ —Å –ª–æ–≥–æ—Ç–∏–ø–æ–º', price: 2000, emoji: 'üèÖ' }
        ],
        privileges: [
            { id: 6, name: '–ó–∞–∫–∞–∑ –ø–∏—Ü—Ü—ã –≤ –æ—Ñ–∏—Å', price: 4500, emoji: 'üçï' },
            { id: 7, name: '–í—ã–±–æ—Ä –ø–µ—Å–Ω–∏ –¥–ª—è –æ–±—â–µ–≥–æ —á–∞—Ç–∞ (–ø–Ω)', price: 1000, emoji: 'üéµ' },
            { id: 8, name: '–í—ã–±–æ—Ä –∫–∞—Ä—Ç–∏–Ω–∫–∏ –¥–ª—è —á–∞—Ç–∞ (–ø–Ω/–ø—Ç)', price: 1000, emoji: 'üñºÔ∏è' },
            { id: 9, name: '–û—Å–æ–±–µ–Ω–Ω–æ–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ –î–†', price: 2000, emoji: 'üéÇ' },
            { id: 10, name: '–ó–∞–∫–∞–∑ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –ø–µ—á–µ–Ω—å—è', price: 1500, emoji: 'üç™' },
            { id: 11, name: '–ö–∞–Ω—Ü–µ–ª—è—Ä–∏—è, –Ω–µ —Å–≤—è–∑–∞–Ω–Ω–∞—è —Å —Ä–∞–±–æ—Ç–æ–π', price: 3000, emoji: 'üìù' },
            { id: 12, name: '–¢–∞–∫—Å–∏ –¥–æ –¥–æ–º–∞ (—Å—Ç–∞–Ω–¥–∞—Ä—Ç)', price: 2500, emoji: 'üöï' },
            { id: 13, name: '–£—Ö–æ–¥ –Ω–∞ —á–∞—Å —Ä–∞–Ω—å—à–µ', price: 5000, emoji: 'üèÉ‚Äç‚ôÇÔ∏è' },
            { id: 14, name: '–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–∞ –∫–æ—Ñ–µ', price: 1500, emoji: '‚òï' },
            { id: 15, name: '–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –≤ –∞–ø—Ç–µ–∫—É', price: 6500, emoji: 'üíä' },
            { id: 16, name: '–ì—Ä–æ–º–∫–æ –ø–æ—Ö–∏—Ö–∏–∫–∞—Ç—å —Å –∫–æ–ª–ª–µ–≥–∞–º–∏', price: 1000, emoji: 'üòÑ' },
            { id: 17, name: '–ó–∞–∫–∞–∑ –∫–æ—Ä–æ–±–∫–∏ —Ñ—Ä—É–∫—Ç–æ–≤', price: 8000, emoji: 'üçé' },
            { id: 18, name: '–ó–∞–∫–∞–∑ –æ—Ä–µ—Ö–æ–≤ –≤ –æ—Ñ–∏—Å', price: 2000, emoji: 'ü•ú' },
            { id: 19, name: '–ñ–∏–≤–æ–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ –¥–ª—è —Ä–∞–±–æ—á–µ–≥–æ –º–µ—Å—Ç–∞', price: 2000, emoji: 'üå±' },
            { id: 20, name: '–ù–∞—Å—Ç–æ–ª—å–Ω–∞—è –∏–≥—Ä–∞ –≤ –æ—Ñ–∏—Å–µ', price: 2000, emoji: 'üé≤' },
            { id: 21, name: '–ó–≤–µ–∑–¥–∞ –º–µ—Å—è—Ü–∞', price: 5500, emoji: '‚≠ê' },
            { id: 22, name: '–õ–∏—á–Ω–∞—è –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å –≤ —á–∞—Ç–µ', price: 3000, emoji: 'üôè' },
            { id: 23, name: '–£–±–æ—Ä–∫–∞ —Ä–∞–±–æ—á–µ–≥–æ –º–µ—Å—Ç–∞', price: 1700, emoji: 'üßπ' },
            { id: 24, name: '–ü–∞—Ä–∫–æ–≤–æ—á–Ω–æ–µ –º–µ—Å—Ç–æ (1 –¥–µ–Ω—å)', price: 3000, emoji: 'üöó' },
            { id: 25, name: '–ü–æ–∑–¥–Ω–∏–π –ø—Ä–∏—Ö–æ–¥ –Ω–∞ 1 —á–∞—Å', price: 5000, emoji: 'üò¥' }
        ]
    };

    res.json(rewards);
});

module.exports = router;