const express = require('express');
const { authenticateToken, requireAdmin } = require('../middleware/auth');

// –í—ã–±–∏—Ä–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –ë–î –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–∫—Ä—É–∂–µ–Ω–∏—è
const isProduction = process.env.NODE_ENV === 'production';
const { dbRun, dbGet } = isProduction 
  ? require('../database/db-postgres')
  : require('../database/db');

const router = express.Router();

// –í—Å–µ —Ä–æ—É—Ç—ã —Ç—Ä–µ–±—É—é—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
router.use(authenticateToken, requireAdmin);

// –û—á–∏—Å—Ç–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (–º—è–≥–∫–∞—è –æ—á–∏—Å—Ç–∫–∞)
router.post('/clean-database', async (req, res) => {
    try {
        console.log('üßπ –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ—á–∏—Å—Ç–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...');
        
        // –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        await dbRun(isProduction ? 'BEGIN' : 'BEGIN TRANSACTION');
        
        try {
            const results = {};
            
            // 1. –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            console.log('–£–¥–∞–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏...');
            const transResult = await dbRun('DELETE FROM transactions');
            results.transactions = transResult.changes || 0;
            console.log(`–£–¥–∞–ª–µ–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${results.transactions}`);
            
            // 2. –£–¥–∞–ª—è–µ–º –≤—Å–µ –∑–∞—è–≤–∫–∏
            console.log('–£–¥–∞–ª—è–µ–º –∑–∞—è–≤–∫–∏...');
            const reqResult = await dbRun('DELETE FROM requests');
            results.requests = reqResult.changes || 0;
            console.log(`–£–¥–∞–ª–µ–Ω–æ –∑–∞—è–≤–æ–∫: ${results.requests}`);
            
            // 3. –£–¥–∞–ª—è–µ–º –≤—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
            console.log('–£–¥–∞–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤...');
            const actResult = await dbRun('DELETE FROM admin_actions');
            results.adminActions = actResult.changes || 0;
            console.log(`–£–¥–∞–ª–µ–Ω–æ –¥–µ–π—Å—Ç–≤–∏–π: ${results.adminActions}`);
            
            // 4. –£–¥–∞–ª—è–µ–º –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –Ω–∞–≥—Ä–∞–¥—ã
            console.log('–£–¥–∞–ª—è–µ–º –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –Ω–∞–≥—Ä–∞–¥—ã...');
            const rewResult = await dbRun('DELETE FROM reward_requests');
            results.rewardRequests = rewResult.changes || 0;
            console.log(`–£–¥–∞–ª–µ–Ω–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –Ω–∞–≥—Ä–∞–¥—ã: ${results.rewardRequests}`);
            
            // 5. –û–±–Ω—É–ª—è–µ–º –±–∞–ª–∞–Ω—Å—ã –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            console.log('–û–±–Ω—É–ª—è–µ–º –±–∞–ª–∞–Ω—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
            const balResult = await dbRun('UPDATE users SET balance = 0');
            results.balancesReset = balResult.changes || 0;
            console.log(`–û–±–Ω—É–ª–µ–Ω–æ –±–∞–ª–∞–Ω—Å–æ–≤: ${results.balancesReset}`);
            
            // 6. –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ä—É–ª–µ—Ç–∫–∏ (–µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
            try {
                const roulResult = await dbRun('DELETE FROM roulette_winners');
                results.rouletteWinners = roulResult.changes || 0;
            } catch (e) {
                results.rouletteWinners = 0;
            }
            
            // –ö–æ–º–º–∏—Ç–∏–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            await dbRun('COMMIT');
            
            // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            const userCount = await dbGet('SELECT COUNT(*) as count FROM users');
            results.remainingUsers = userCount.count;
            
            console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞');
            
            res.json({
                success: true,
                message: '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞',
                results: {
                    deletedTransactions: results.transactions,
                    deletedRequests: results.requests,
                    deletedAdminActions: results.adminActions,
                    deletedRewardRequests: results.rewardRequests,
                    resetBalances: results.balancesReset,
                    deletedRouletteWinners: results.rouletteWinners,
                    remainingUsers: results.remainingUsers
                }
            });
            
        } catch (error) {
            await dbRun('ROLLBACK');
            throw error;
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
        res.status(500).json({ 
            success: false,
            message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö',
            error: error.message 
        });
    }
});

module.exports = router;