require('dotenv').config();

async function fixPostgreSQLIssues() {
    const isPostgreSQL = process.env.NODE_ENV === 'production' && process.env.DATABASE_URL;
    
    if (!isPostgreSQL) {
        console.log('‚ö†Ô∏è  –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è PostgreSQL');
        process.exit(0);
    }
    
    const { pool } = require('./database/db-postgres');
    const bcrypt = require('bcryptjs');
    
    try {
        console.log('üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º—ã PostgreSQL...\n');
        
        // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ö–µ–º—É roulette_winners
        console.log('üìã –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É roulette_winners...');
        const columns = await pool.query(`
            SELECT column_name, data_type 
            FROM information_schema.columns 
            WHERE table_name = 'roulette_winners'
            ORDER BY ordinal_position
        `);
        
        console.log('–°—Ç–æ–ª–±—Ü—ã:');
        columns.rows.forEach(col => {
            console.log(`  - ${col.column_name}: ${col.data_type}`);
        });
        
        // 2. –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Å—Ç–æ–ª–±—Ü—ã –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        try {
            await pool.query('ALTER TABLE roulette_winners ADD COLUMN IF NOT EXISTS prize_amount INTEGER');
            await pool.query('ALTER TABLE roulette_winners ADD COLUMN IF NOT EXISTS drawn_by INTEGER REFERENCES users(id)');
            console.log('‚úÖ –°—Ç–æ–ª–±—Ü—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã/–ø—Ä–æ–≤–µ—Ä–µ–Ω—ã');
        } catch (e) {
            console.log('‚ö†Ô∏è  –°—Ç–æ–ª–±—Ü—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –∏–ª–∏ –æ—à–∏–±–∫–∞:', e.message);
        }
        
        // 3. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø–∞—Ä–æ–ª–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π GIP
        console.log('\nüîë –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π GIP...');
        const defaultPassword = 'tcyp2025';
        const hashedPassword = await bcrypt.hash(defaultPassword, 10);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–æ–ª–∏ –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π GIP
        const updateResult = await pool.query(`
            UPDATE users 
            SET password_hash = $1, is_active = true 
            WHERE email LIKE '%@gip.su' 
            RETURNING email, full_name
        `, [hashedPassword]);
        
        console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ ${updateResult.rowCount} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
        
        // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        console.log('\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:');
        const checkEmails = [
            'Gujovaod@gip.su',
            'savinkinave@gip.su',
            'k.e.ishchenko@gip.su'
        ];
        
        for (const email of checkEmails) {
            const result = await pool.query(
                'SELECT id, email, full_name, is_active, is_admin FROM users WHERE LOWER(email) = LOWER($1)',
                [email]
            );
            
            if (result.rows.length > 0) {
                const user = result.rows[0];
                console.log(`‚úÖ ${user.full_name}:`);
                console.log(`   - Email: ${user.email}`);
                console.log(`   - ID: ${user.id}`);
                console.log(`   - –ê–∫—Ç–∏–≤–µ–Ω: ${user.is_active}`);
                console.log(`   - –ê–¥–º–∏–Ω: ${user.is_admin}`);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
                const passCheck = await bcrypt.compare(defaultPassword, hashedPassword);
                console.log(`   - –ü–∞—Ä–æ–ª—å tcyp2025: ${passCheck ? 'OK' : '–û–®–ò–ë–ö–ê'}`);
            } else {
                console.log(`‚ùå ${email} - –ù–ï –ù–ê–ô–î–ï–ù`);
                
                // –ò—â–µ–º –ø–æ—Ö–æ–∂–∏–µ
                const similar = await pool.query(
                    'SELECT email, full_name FROM users WHERE email ILIKE $1 LIMIT 5',
                    [`%${email.split('@')[0]}%`]
                );
                
                if (similar.rows.length > 0) {
                    console.log('   –í–æ–∑–º–æ–∂–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:');
                    similar.rows.forEach(u => {
                        console.log(`   - ${u.email} (${u.full_name})`);
                    });
                }
            }
        }
        
        // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        console.log('\nüìã –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É transactions...');
        const transColumns = await pool.query(`
            SELECT column_name, data_type 
            FROM information_schema.columns 
            WHERE table_name = 'transactions'
            ORDER BY ordinal_position
        `);
        
        console.log('–°—Ç–æ–ª–±—Ü—ã transactions:');
        transColumns.rows.forEach(col => {
            console.log(`  - ${col.column_name}: ${col.data_type}`);
        });
        
        // 6. –î–æ–±–∞–≤–ª—è–µ–º user_id –∏ admin_id –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        try {
            await pool.query('ALTER TABLE transactions ADD COLUMN IF NOT EXISTS user_id INTEGER REFERENCES users(id)');
            await pool.query('ALTER TABLE transactions ADD COLUMN IF NOT EXISTS admin_id INTEGER REFERENCES users(id)');
            console.log('‚úÖ –°—Ç–æ–ª–±—Ü—ã user_id –∏ admin_id –¥–æ–±–∞–≤–ª–µ–Ω—ã/–ø—Ä–æ–≤–µ—Ä–µ–Ω—ã');
        } catch (e) {
            console.log('‚ö†Ô∏è  –°—Ç–æ–ª–±—Ü—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –∏–ª–∏ –æ—à–∏–±–∫–∞:', e.message);
        }
        
        console.log('\n‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã!');
        console.log('\nüìß –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –≤—Ö–æ–¥–∏—Ç—å —Å –ø–∞—Ä–æ–ª–µ–º: tcyp2025');
        
    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    } finally {
        await pool.end();
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º
fixPostgreSQLIssues();