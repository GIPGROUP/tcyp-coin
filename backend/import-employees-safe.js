const { db } = require('./database/db');
const bcrypt = require('bcryptjs');
const fs = require('fs');

// –ü—É—Ç—å –∫ JSON —Ñ–∞–π–ª—É
const JSON_FILE_PATH = 'C:\\Users\\mankovama\\Downloads\\t.txt';

// –û–±—â–∏–π –ø–∞—Ä–æ–ª—å –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const DEFAULT_PASSWORD = 'tcyp2025';

async function importEmployees() {
    try {
        // –ß–∏—Ç–∞–µ–º JSON —Ñ–∞–π–ª
        console.log('–ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤...');
        const fileContent = fs.readFileSync(JSON_FILE_PATH, 'utf8');
        const employees = JSON.parse(fileContent);
        
        console.log(`–ù–∞–π–¥–µ–Ω–æ ${employees.length} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞`);
        
        // –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å –æ–¥–∏–Ω —Ä–∞–∑
        const hashedPassword = await bcrypt.hash(DEFAULT_PASSWORD, 10);
        
        // –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–¥–∏–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é —Ç–µ–∫—É—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        console.log('\n–°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é —Ç–µ–∫—É—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
        const backupUsers = db.prepare('SELECT * FROM users').all();
        fs.writeFileSync('backup_users.json', JSON.stringify(backupUsers, null, 2));
        console.log(`–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ backup_users.json (${backupUsers.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)`);
        
        // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
        const insertUser = db.prepare(`
            INSERT OR IGNORE INTO users (email, password, full_name, position, department, balance, is_admin, is_active)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?)
        `);
        
        let importedCount = 0;
        let skippedCount = 0;
        let adminFound = false;
        
        // –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        const insertMany = db.transaction((employees) => {
            for (const emp of employees) {
                try {
                    // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                    const employee = emp.employee || {};
                    const email = emp.email || emp.username || '';
                    const lastName = employee.last_name || employee.short_name || '';
                    const firstName = employee.first_name || emp.first_name || '';
                    const middleName = employee.middle_name || '';
                    const position = employee.position || '–°–æ—Ç—Ä—É–¥–Ω–∏–∫';
                    
                    // –§–æ—Ä–º–∏—Ä—É–µ–º –§–ò–û
                    const fullName = `${lastName} ${firstName} ${middleName}`.trim();
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –°–∞–≤–∏–Ω–∫–∏–Ω–∞ –í–∞–ª–µ—Ä–∏—è
                    const isAdmin = lastName.toLowerCase().includes('—Å–∞–≤–∏–Ω–∫–∏–Ω') && 
                                   firstName.toLowerCase().includes('–≤–∞–ª–µ—Ä–∏');
                    
                    if (isAdmin) {
                        adminFound = true;
                        console.log(`\nüîë –ù–∞–π–¥–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: ${fullName}`);
                    }
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                    const existingUser = db.prepare('SELECT id FROM users WHERE email = ?').get(email);
                    
                    if (existingUser) {
                        console.log(`‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞–µ–º ${fullName} - email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${email}`);
                        skippedCount++;
                        continue;
                    }
                    
                    // –í—Å—Ç–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    insertUser.run(
                        email,
                        hashedPassword,
                        fullName,
                        position,
                        '–¢–¶–£–ü', // –î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                        0, // –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
                        isAdmin ? 1 : 0,
                        1 // is_active
                    );
                    
                    importedCount++;
                    
                    if (importedCount % 10 === 0) {
                        console.log(`‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${importedCount} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...`);
                    }
                    
                } catch (error) {
                    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:`, error.message);
                }
            }
        });
        
        // –í—ã–ø–æ–ª–Ω—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        insertMany(employees);
        
        console.log('\n=== –ò–ú–ü–û–†–¢ –ó–ê–í–ï–†–®–ï–ù ===');
        console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: ${importedCount} –Ω–æ–≤—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤`);
        console.log(`‚ö†Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ (—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç): ${skippedCount}`);
        console.log(`üîë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–∞–π–¥–µ–Ω: ${adminFound ? '–î–∞' : '–ù–µ—Ç'}`);
        console.log(`\nüìß –í—Å–µ –Ω–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –≤–æ–π—Ç–∏ —Å –ø–∞—Ä–æ–ª–µ–º: ${DEFAULT_PASSWORD}`);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        const userCount = db.prepare('SELECT COUNT(*) as count FROM users').get();
        const adminCount = db.prepare('SELECT COUNT(*) as count FROM users WHERE is_admin = true').get();
        
        console.log(`\nüìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
        console.log(`–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ë–î: ${userCount.count}`);
        console.log(`–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: ${adminCount.count}`);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        const newUsers = db.prepare('SELECT email, full_name FROM users ORDER BY id DESC LIMIT 5').all();
        console.log('\nüÜï –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:');
        newUsers.forEach(user => {
            console.log(`  - ${user.full_name} (${user.email})`);
        });
        
    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ:', error);
        console.log('\n‚ö†Ô∏è  –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ backup_users.json');
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∏–º–ø–æ—Ä—Ç
if (require.main === module) {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤...');
    console.log('‚ö†Ô∏è  –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ù–ï —É–¥–∞–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —Ç–æ–ª—å–∫–æ –¥–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã—Ö\n');
    importEmployees();
}

module.exports = { importEmployees };