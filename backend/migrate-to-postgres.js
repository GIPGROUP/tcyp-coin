const sqlite3 = require('sqlite3').verbose();
const { Pool } = require('pg');
const path = require('path');
require('dotenv').config();

console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –∏–∑ SQLite –≤ PostgreSQL...\n');

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ DATABASE_URL
if (!process.env.DATABASE_URL) {
    console.error('‚ùå –û—à–∏–±–∫–∞: DATABASE_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
    console.log('üí° –î–æ–±–∞–≤—å—Ç–µ DATABASE_URL –≤ —Ñ–∞–π–ª .env –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è');
    process.exit(1);
}

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SQLite
const sqliteDb = new sqlite3.Database(path.join(__dirname, 'database', 'tcyp_coins.db'));

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL
const pgPool = new Pool({
    connectionString: process.env.DATABASE_URL,
    ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false
});

async function migrateData() {
    try {
        // –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –≤ PostgreSQL
        console.log('üìù –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –≤ PostgreSQL...');
        await pgPool.query(`
            -- –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            CREATE TABLE IF NOT EXISTS users (
                id SERIAL PRIMARY KEY,
                email VARCHAR(255) UNIQUE NOT NULL,
                password_hash TEXT NOT NULL,
                full_name VARCHAR(255) NOT NULL,
                position VARCHAR(255),
                department VARCHAR(255),
                hire_date DATE DEFAULT CURRENT_DATE,
                is_admin BOOLEAN DEFAULT false,
                is_active BOOLEAN DEFAULT true,
                balance INTEGER DEFAULT 0,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            );

            -- –¢–∞–±–ª–∏—Ü–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
            CREATE TABLE IF NOT EXISTS transactions (
                id SERIAL PRIMARY KEY,
                from_user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
                to_user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
                amount INTEGER NOT NULL,
                type VARCHAR(50) NOT NULL,
                description TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            );

            -- –¢–∞–±–ª–∏—Ü–∞ –∑–∞—è–≤–æ–∫
            CREATE TABLE IF NOT EXISTS requests (
                id SERIAL PRIMARY KEY,
                user_id INTEGER NOT NULL REFERENCES users(id) ON DELETE CASCADE,
                activity_type VARCHAR(100) NOT NULL,
                description TEXT,
                link TEXT,
                expected_coins INTEGER NOT NULL,
                comment TEXT,
                status VARCHAR(50) DEFAULT 'pending',
                admin_comment TEXT,
                processed_by INTEGER REFERENCES users(id) ON DELETE SET NULL,
                processed_at TIMESTAMP,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            );

            -- –¢–∞–±–ª–∏—Ü–∞ –¥–µ–π—Å—Ç–≤–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
            CREATE TABLE IF NOT EXISTS admin_actions (
                id SERIAL PRIMARY KEY,
                admin_id INTEGER NOT NULL REFERENCES users(id) ON DELETE CASCADE,
                action_type VARCHAR(100) NOT NULL,
                target_user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
                amount INTEGER,
                description TEXT,
                can_undo BOOLEAN DEFAULT true,
                undone BOOLEAN DEFAULT false,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            );

            -- –¢–∞–±–ª–∏—Ü–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π —Ä—É–ª–µ—Ç–∫–∏
            CREATE TABLE IF NOT EXISTS roulette_winners (
                id SERIAL PRIMARY KEY,
                user_id INTEGER NOT NULL REFERENCES users(id) ON DELETE CASCADE,
                amount INTEGER NOT NULL,
                week_number INTEGER NOT NULL,
                year INTEGER NOT NULL,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            );
        `);
        console.log('‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã\n');

        // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –≤ PostgreSQL
        console.log('üóëÔ∏è  –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –≤ PostgreSQL...');
        await pgPool.query('TRUNCATE TABLE roulette_winners, admin_actions, requests, transactions, users RESTART IDENTITY CASCADE');
        console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã\n');

        // –ú–∏–≥—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        console.log('üë• –ú–∏–≥—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
        await new Promise((resolve, reject) => {
            sqliteDb.all('SELECT * FROM users', async (err, users) => {
                if (err) return reject(err);
                
                for (const user of users) {
                    try {
                        await pgPool.query(`
                            INSERT INTO users (id, email, password_hash, full_name, position, department, 
                                             hire_date, is_admin, is_active, balance, created_at, updated_at)
                            VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12)
                        `, [
                            user.id,
                            user.email,
                            user.password_hash,
                            user.full_name,
                            user.position,
                            user.department,
                            user.hire_date,
                            user.is_admin === 1,
                            user.is_active === 1,
                            user.balance || 0,
                            user.created_at,
                            user.updated_at
                        ]);
                    } catch (error) {
                        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.email}:`, error.message);
                    }
                }
                
                // –û–±–Ω–æ–≤–ª—è–µ–º sequence –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã –∞–≤—Ç–æ–∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞
                await pgPool.query(`SELECT setval('users_id_seq', (SELECT MAX(id) FROM users))`);
                
                console.log(`‚úÖ –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ ${users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n`);
                resolve();
            });
        });

        // –ú–∏–≥—Ä–∞—Ü–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        console.log('üí∏ –ú–∏–≥—Ä–∏—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏...');
        await new Promise((resolve, reject) => {
            sqliteDb.all('SELECT * FROM transactions', async (err, transactions) => {
                if (err) return reject(err);
                
                for (const trans of transactions) {
                    try {
                        await pgPool.query(`
                            INSERT INTO transactions (id, from_user_id, to_user_id, amount, type, description, created_at)
                            VALUES ($1, $2, $3, $4, $5, $6, $7)
                        `, [
                            trans.id,
                            trans.from_user_id,
                            trans.to_user_id,
                            trans.amount,
                            trans.type,
                            trans.description,
                            trans.created_at
                        ]);
                    } catch (error) {
                        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ ${trans.id}:`, error.message);
                    }
                }
                
                if (transactions.length > 0) {
                    await pgPool.query(`SELECT setval('transactions_id_seq', (SELECT MAX(id) FROM transactions))`);
                }
                
                console.log(`‚úÖ –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ ${transactions.length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π\n`);
                resolve();
            });
        });

        // –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞—è–≤–æ–∫
        console.log('üìã –ú–∏–≥—Ä–∏—Ä—É–µ–º –∑–∞—è–≤–∫–∏...');
        await new Promise((resolve, reject) => {
            sqliteDb.all('SELECT * FROM requests', async (err, requests) => {
                if (err) return reject(err);
                
                for (const req of requests) {
                    try {
                        await pgPool.query(`
                            INSERT INTO requests (id, user_id, activity_type, description, link, expected_coins,
                                                comment, status, admin_comment, processed_by, processed_at, created_at)
                            VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12)
                        `, [
                            req.id,
                            req.user_id,
                            req.activity_type,
                            req.description,
                            req.link,
                            req.expected_coins,
                            req.comment,
                            req.status,
                            req.admin_comment,
                            req.processed_by,
                            req.processed_at,
                            req.created_at
                        ]);
                    } catch (error) {
                        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ –∑–∞—è–≤–∫–∏ ${req.id}:`, error.message);
                    }
                }
                
                if (requests.length > 0) {
                    await pgPool.query(`SELECT setval('requests_id_seq', (SELECT MAX(id) FROM requests))`);
                }
                
                console.log(`‚úÖ –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ ${requests.length} –∑–∞—è–≤–æ–∫\n`);
                resolve();
            });
        });

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        console.log('üìä –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–∏–≥—Ä–∞—Ü–∏–∏...');
        const userCount = await pgPool.query('SELECT COUNT(*) FROM users');
        const transCount = await pgPool.query('SELECT COUNT(*) FROM transactions');
        const reqCount = await pgPool.query('SELECT COUNT(*) FROM requests');
        
        console.log(`\n‚úÖ –ú–ò–ì–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!`);
        console.log(`   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${userCount.rows[0].count}`);
        console.log(`   –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${transCount.rows[0].count}`);
        console.log(`   –ó–∞—è–≤–æ–∫: ${reqCount.rows[0].count}`);
        
        console.log('\nüéâ –¢–µ–ø–µ—Ä—å –≤–∞—à–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç PostgreSQL!');
        console.log('üìù –ù–µ –∑–∞–±—É–¥—å—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ Render.');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏:', error);
    } finally {
        sqliteDb.close();
        await pgPool.end();
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
migrateData();