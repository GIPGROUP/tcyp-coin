const { Pool } = require('pg');
require('dotenv').config();

// –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
console.log('üîç DATABASE_URL –¥–æ—Å—Ç—É–ø–µ–Ω:', !!process.env.DATABASE_URL);
console.log('üîç NODE_ENV:', process.env.NODE_ENV);

// –°–æ–∑–¥–∞–µ–º –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –¥–ª—è PostgreSQL
const poolConfig = {
    connectionString: process.env.DATABASE_URL,
    ssl: process.env.NODE_ENV === 'production' 
        ? { rejectUnauthorized: false } 
        : false,
    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–º–∞—É—Ç—ã –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è Render
    connectionTimeoutMillis: 10000,
    idleTimeoutMillis: 30000,
    max: 10
};

const pool = new Pool(poolConfig);

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø—É–ª–∞
pool.on('error', (err) => {
    console.error('üí• –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ –ø—É–ª–µ PostgreSQL:', err);
});

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ (–Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º –∑–∞–ø—É—Å–∫)
const testConnection = async () => {
    try {
        const client = await pool.connect();
        console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ PostgreSQL');
        client.release();
    } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL:', err.message);
        console.error('üìù –ü—Ä–æ–≤–µ—Ä—å—Ç–µ DATABASE_URL –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Render');
    }
};

// –í—ã–∑—ã–≤–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ, –Ω–µ –±–ª–æ–∫–∏—Ä—É—è
testConnection();

// –û–±–µ—Ä—Ç–∫–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º
const dbAll = async (sql, params = []) => {
    try {
        // –ó–∞–º–µ–Ω—è–µ–º ? –Ω–∞ $1, $2 –∏ —Ç.–¥. –¥–ª—è PostgreSQL
        let pgSql = sql;
        let paramIndex = 1;
        while (pgSql.includes('?')) {
            pgSql = pgSql.replace('?', `$${paramIndex}`);
            paramIndex++;
        }
        
        const result = await pool.query(pgSql, params);
        return result.rows;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞:', error);
        throw error;
    }
};

const dbGet = async (sql, params = []) => {
    try {
        // –ó–∞–º–µ–Ω—è–µ–º ? –Ω–∞ $1, $2 –∏ —Ç.–¥. –¥–ª—è PostgreSQL
        let pgSql = sql;
        let paramIndex = 1;
        while (pgSql.includes('?')) {
            pgSql = pgSql.replace('?', `$${paramIndex}`);
            paramIndex++;
        }
        
        const result = await pool.query(pgSql, params);
        return result.rows[0] || null;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞:', error);
        throw error;
    }
};

const dbRun = async (sql, params = []) => {
    try {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        if (sql.trim().toUpperCase() === 'BEGIN TRANSACTION') {
            const result = await pool.query('BEGIN');
            return { id: null, changes: 0 };
        }
        
        if (sql.trim().toUpperCase() === 'COMMIT') {
            const result = await pool.query('COMMIT');
            return { id: null, changes: 0 };
        }
        
        if (sql.trim().toUpperCase() === 'ROLLBACK') {
            const result = await pool.query('ROLLBACK');
            return { id: null, changes: 0 };
        }
        
        // –ó–∞–º–µ–Ω—è–µ–º ? –Ω–∞ $1, $2 –∏ —Ç.–¥. –¥–ª—è PostgreSQL
        let pgSql = sql;
        let paramIndex = 1;
        while (pgSql.includes('?')) {
            pgSql = pgSql.replace('?', `$${paramIndex}`);
            paramIndex++;
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º RETURNING –¥–ª—è INSERT –æ–ø–µ—Ä–∞—Ü–∏–π
        if (pgSql.toUpperCase().startsWith('INSERT') && !pgSql.toUpperCase().includes('RETURNING')) {
            pgSql += ' RETURNING id';
        }
        
        const result = await pool.query(pgSql, params);
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ä–µ–∫—Ç, —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π —Å SQLite
        return {
            id: result.rows[0]?.id || null,
            changes: result.rowCount
        };
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞:', error);
        throw error;
    }
};

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏
const beginTransaction = async () => {
    const client = await pool.connect();
    await client.query('BEGIN');
    return client;
};

const commitTransaction = async (client) => {
    await client.query('COMMIT');
    client.release();
};

const rollbackTransaction = async (client) => {
    await client.query('ROLLBACK');
    client.release();
};

// –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º –∫–æ–¥–æ–º, –∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã
const db = {
    prepare: (sql) => ({
        all: (...params) => {
            // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –ø—Ä–æ–º–∏—Å –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            return dbAll(sql, params);
        },
        get: (...params) => {
            return dbGet(sql, params);
        },
        run: (...params) => {
            return dbRun(sql, params);
        }
    }),
    exec: async (sql) => {
        // –î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö SQL –∫–æ–º–∞–Ω–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, CREATE TABLE)
        try {
            await pool.query(sql);
            return true;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL:', error);
            throw error;
        }
    }
};

module.exports = {
    pool,
    db,
    dbAll,
    dbGet,
    dbRun,
    beginTransaction,
    commitTransaction,
    rollbackTransaction
};