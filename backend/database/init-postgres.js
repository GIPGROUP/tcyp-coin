const { pool, dbRun } = require('./db-postgres');
const bcrypt = require('bcryptjs');
require('dotenv').config();

async function initDatabase() {
    console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PostgreSQL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...\n');
    
    try {
        // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
        await pool.query(`
            -- –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            CREATE TABLE IF NOT EXISTS users (
                id SERIAL PRIMARY KEY,
                email VARCHAR(255) UNIQUE NOT NULL,
                password_hash TEXT NOT NULL,
                full_name VARCHAR(255) NOT NULL,
                position VARCHAR(255),
                department VARCHAR(255),
                hire_date DATE DEFAULT CURRENT_DATE,
                is_admin BOOLEAN DEFAULT false,
                is_active BOOLEAN DEFAULT true,
                balance INTEGER DEFAULT 0,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            );

            -- –¢–∞–±–ª–∏—Ü–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
            CREATE TABLE IF NOT EXISTS transactions (
                id SERIAL PRIMARY KEY,
                from_user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
                to_user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
                amount INTEGER NOT NULL,
                type VARCHAR(50) NOT NULL,
                description TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            );

            -- –¢–∞–±–ª–∏—Ü–∞ –∑–∞—è–≤–æ–∫
            CREATE TABLE IF NOT EXISTS requests (
                id SERIAL PRIMARY KEY,
                user_id INTEGER NOT NULL REFERENCES users(id) ON DELETE CASCADE,
                activity_type VARCHAR(100) NOT NULL,
                description TEXT,
                link TEXT,
                expected_coins INTEGER NOT NULL,
                comment TEXT,
                status VARCHAR(50) DEFAULT 'pending',
                admin_comment TEXT,
                processed_by INTEGER REFERENCES users(id) ON DELETE SET NULL,
                processed_at TIMESTAMP,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            );

            -- –¢–∞–±–ª–∏—Ü–∞ –¥–µ–π—Å—Ç–≤–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
            CREATE TABLE IF NOT EXISTS admin_actions (
                id SERIAL PRIMARY KEY,
                admin_id INTEGER NOT NULL REFERENCES users(id) ON DELETE CASCADE,
                action_type VARCHAR(100) NOT NULL,
                target_user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
                amount INTEGER,
                description TEXT,
                can_undo BOOLEAN DEFAULT true,
                undone BOOLEAN DEFAULT false,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            );

            -- –¢–∞–±–ª–∏—Ü–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π —Ä—É–ª–µ—Ç–∫–∏
            CREATE TABLE IF NOT EXISTS roulette_winners (
                id SERIAL PRIMARY KEY,
                user_id INTEGER NOT NULL REFERENCES users(id) ON DELETE CASCADE,
                amount INTEGER NOT NULL,
                week_number INTEGER NOT NULL,
                year INTEGER NOT NULL,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            );

            -- –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
            CREATE INDEX IF NOT EXISTS idx_transactions_from_user ON transactions(from_user_id);
            CREATE INDEX IF NOT EXISTS idx_transactions_to_user ON transactions(to_user_id);
            CREATE INDEX IF NOT EXISTS idx_requests_user ON requests(user_id);
            CREATE INDEX IF NOT EXISTS idx_requests_status ON requests(status);
            CREATE INDEX IF NOT EXISTS idx_admin_actions_admin ON admin_actions(admin_id);
            CREATE INDEX IF NOT EXISTS idx_roulette_winners_user ON roulette_winners(user_id);
            CREATE INDEX IF NOT EXISTS idx_roulette_winners_week_year ON roulette_winners(week_number, year);
        `);
        
        console.log('‚úÖ –¢–∞–±–ª–∏—Ü—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        const result = await pool.query('SELECT COUNT(*) as count FROM users');
        const userCount = parseInt(result.rows[0].count);
        
        if (userCount === 0) {
            console.log('\nüìù –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é...');
            
            // –°–æ–∑–¥–∞–µ–º —Ö–µ—à –ø–∞—Ä–æ–ª—è
            const hashedPassword = await bcrypt.hash('admin123', 10);
            
            // –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            await dbRun(`
                INSERT INTO users (email, password_hash, full_name, position, department, is_admin, balance)
                VALUES (?, ?, ?, ?, ?, ?, ?)
            `, [
                'admin@tcyp.ru',
                hashedPassword,
                '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –°–∏—Å—Ç–µ–º—ã',
                '–°–∏—Å—Ç–µ–º–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
                'IT',
                true,
                0
            ]);
            
            console.log('\n‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω:');
            console.log('   Email: admin@tcyp.ru');
            console.log('   –ü–∞—Ä–æ–ª—å: admin123');
            console.log('\n‚ö†Ô∏è  –í–ê–ñ–ù–û: –°–º–µ–Ω–∏—Ç–µ –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –≤—Ö–æ–¥–∞!');
        } else {
            console.log(`\n‚úÖ –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É–∂–µ –µ—Å—Ç—å ${userCount} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
        }
        
        console.log('\n‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö PostgreSQL —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
        throw error;
    } finally {
        await pool.end();
    }
}

// –ï—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
    initDatabase();
}

module.exports = { initDatabase };