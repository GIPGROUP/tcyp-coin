require('dotenv').config();
const { dbAll, dbRun, dbGet } = require('./database/db');
const bcrypt = require('bcryptjs');

async function fixAllUsers() {
    console.log('üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...\n');
    
    try {
        // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–∞—Ä–æ–ª—å
        const defaultPassword = 'tcyp2025';
        const hashedPassword = await bcrypt.hash(defaultPassword, 10);
        
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –¥–æ–º–µ–Ω–∞ gip.su
        const users = await dbAll(`
            SELECT id, email, full_name, is_active, password_hash
            FROM users
            WHERE email LIKE '%@gip.su'
            ORDER BY full_name
        `);
        
        console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π GIP\n`);
        
        let fixed = 0;
        let activated = 0;
        
        for (const user of users) {
            let needsUpdate = false;
            const updates = [];
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
            if (!user.password_hash) {
                console.log(`‚ùå ${user.full_name} - –Ω–µ—Ç –ø–∞—Ä–æ–ª—è`);
                needsUpdate = true;
            } else {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏ –ø–∞—Ä–æ–ª—å tcyp2025
                const isValidPassword = await bcrypt.compare(defaultPassword, user.password_hash);
                if (!isValidPassword) {
                    console.log(`‚ö†Ô∏è  ${user.full_name} - –ø–∞—Ä–æ–ª—å –Ω–µ tcyp2025`);
                    needsUpdate = true;
                }
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            if (!user.is_active) {
                console.log(`üîí ${user.full_name} - –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω`);
                activated++;
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if (needsUpdate || !user.is_active) {
                await dbRun(`
                    UPDATE users 
                    SET password_hash = ?, is_active = true 
                    WHERE id = ?
                `, [hashedPassword, user.id]);
                
                console.log(`  ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω: ${user.full_name}`);
                fixed++;
            }
        }
        
        console.log('\n' + '='.repeat(50));
        console.log('üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´:');
        console.log('='.repeat(50));
        console.log(`‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–∞—Ä–æ–ª–µ–π: ${fixed}`);
        console.log(`‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${activated}`);
        console.log(`\nüìß –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ GIP —Ç–µ–ø–µ—Ä—å –º–æ–≥—É—Ç –≤–æ–π—Ç–∏ —Å –ø–∞—Ä–æ–ª–µ–º: ${defaultPassword}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:');
        console.log('='.repeat(50));
        
        const checkEmails = [
            'Gujovaod@gip.su',
            'k.e.ishchenko@gip.su',
            'savinkinave@gip.su',
            'manckovama@gip.su'
        ];
        
        for (const email of checkEmails) {
            const user = await dbGet(`
                SELECT email, full_name, is_active, is_admin 
                FROM users 
                WHERE LOWER(email) = LOWER(?)
            `, [email]);
            
            if (user) {
                console.log(`‚úÖ ${user.full_name}:`);
                console.log(`   - Email: ${user.email}`);
                console.log(`   - –ê–∫—Ç–∏–≤–µ–Ω: ${user.is_active ? '–î–ê' : '–ù–ï–¢'}`);
                console.log(`   - –ê–¥–º–∏–Ω: ${user.is_admin ? '–î–ê' : '–ù–ï–¢'}`);
            } else {
                console.log(`‚ùå ${email} - –ù–ï –ù–ê–ô–î–ï–ù`);
            }
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞:', error);
    }
    
    process.exit(0);
}

// –ó–∞–ø—É—Å–∫–∞–µ–º
fixAllUsers();