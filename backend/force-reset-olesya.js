require('dotenv').config();
const bcrypt = require('bcryptjs');

async function forceResetOlesya() {
    const isPostgreSQL = process.env.NODE_ENV === 'production' && process.env.DATABASE_URL;
    
    if (!isPostgreSQL) {
        console.log('‚ö†Ô∏è  –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è PostgreSQL');
        process.exit(0);
    }
    
    const { pool } = require('./database/db-postgres');
    
    try {
        console.log('üîß –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Å–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è –¥–ª—è –û–ª–µ—Å–∏ –ì—É–∂–æ–≤–æ–π...\n');
        
        const newPassword = 'tcyp2025';
        const hashedPassword = await bcrypt.hash(newPassword, 10);
        
        // –ü—Ä–æ–±—É–µ–º –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã email
        const emails = [
            'Gujovaod@gip.su',
            'gujovaod@gip.su',
            'GUJOVAOD@GIP.SU'
        ];
        
        let updated = false;
        
        for (const email of emails) {
            const result = await pool.query(
                `UPDATE users 
                 SET password_hash = $1, is_active = true 
                 WHERE email = $2 OR LOWER(email) = LOWER($2)
                 RETURNING id, email, full_name`,
                [hashedPassword, email]
            );
            
            if (result.rowCount > 0) {
                console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:`);
                result.rows.forEach(user => {
                    console.log(`  - ID: ${user.id}`);
                    console.log(`  - Email: ${user.email}`);
                    console.log(`  - –§–ò–û: ${user.full_name}`);
                });
                updated = true;
                break;
            }
        }
        
        if (!updated) {
            console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!');
            
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            console.log('\nüÜï –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
            
            const insertResult = await pool.query(
                `INSERT INTO users (email, password_hash, full_name, position, department, is_admin, balance, is_active)
                 VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
                 ON CONFLICT (email) DO UPDATE 
                 SET password_hash = $2, is_active = $8
                 RETURNING id, email, full_name`,
                [
                    'Gujovaod@gip.su',
                    hashedPassword,
                    '–ì—É–∂–æ–≤–∞ –û–ª–µ—Å—è –î–µ–Ω–∏—Å–æ–≤–Ω–∞',
                    '–ò–Ω–∂–µ–Ω–µ—Ä-–∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä',
                    '–¢–¶–£–ü',
                    false,
                    0,
                    true
                ]
            );
            
            if (insertResult.rowCount > 0) {
                console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω/–æ–±–Ω–æ–≤–ª–µ–Ω:');
                console.log(`  - ID: ${insertResult.rows[0].id}`);
                console.log(`  - Email: ${insertResult.rows[0].email}`);
                console.log(`  - –§–ò–û: ${insertResult.rows[0].full_name}`);
            }
        }
        
        console.log(`\n‚úÖ –ì–æ—Ç–æ–≤–æ!`);
        console.log(`üìß Email: Gujovaod@gip.su`);
        console.log(`üîë –ü–∞—Ä–æ–ª—å: ${newPassword}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        console.log('\nüîç –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞:');
        const checkResult = await pool.query(
            `SELECT id, email, full_name, is_active, position 
             FROM users 
             WHERE LOWER(email) = LOWER($1)`,
            ['Gujovaod@gip.su']
        );
        
        if (checkResult.rows.length > 0) {
            const user = checkResult.rows[0];
            console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ë–î:`);
            console.log(`  - Email: ${user.email}`);
            console.log(`  - –§–ò–û: ${user.full_name}`);
            console.log(`  - –î–æ–ª–∂–Ω–æ—Å—Ç—å: ${user.position}`);
            console.log(`  - –ê–∫—Ç–∏–≤–µ–Ω: ${user.is_active}`);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
            const passCheck = await bcrypt.compare(newPassword, hashedPassword);
            console.log(`  - –ü–∞—Ä–æ–ª—å —Ä–∞–±–æ—Ç–∞–µ—Ç: ${passCheck ? '–î–ê' : '–ù–ï–¢'}`);
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞:', error);
    } finally {
        await pool.end();
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º
forceResetOlesya();