require('dotenv').config();
const bcrypt = require('bcryptjs');

async function fixLoginIssue() {
    const isPostgreSQL = process.env.NODE_ENV === 'production' && process.env.DATABASE_URL;
    
    if (!isPostgreSQL) {
        console.log('‚ö†Ô∏è  –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è PostgreSQL');
        process.exit(0);
    }
    
    const { pool } = require('./database/db-postgres');
    
    try {
        console.log('üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º —Å –≤—Ö–æ–¥–æ–º...\n');
        
        // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–∞—Ä–æ–ª—å
        const defaultPassword = 'tcyp2025';
        const hashedPassword = await bcrypt.hash(defaultPassword, 10);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –í–°–ï–• –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π @gip.su
        console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–æ–ª–∏ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π GIP...');
        
        const updateResult = await pool.query(`
            UPDATE users 
            SET password_hash = $1, is_active = true 
            WHERE email LIKE '%@gip.su'
            RETURNING email, full_name
        `, [hashedPassword]);
        
        console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ ${updateResult.rowCount} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
        
        if (updateResult.rowCount > 0) {
            console.log('\nüìã –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:');
            updateResult.rows.forEach(user => {
                console.log(`  - ${user.full_name} (${user.email})`);
            });
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:');
        
        const checkEmails = [
            'Gujovaod@gip.su',
            'savinkinave@gip.su',
            'manckovama@gip.su'
        ];
        
        for (const email of checkEmails) {
            const result = await pool.query(
                'SELECT id, email, full_name, is_active FROM users WHERE LOWER(email) = LOWER($1)',
                [email]
            );
            
            if (result.rows.length > 0) {
                const user = result.rows[0];
                console.log(`\n‚úÖ ${user.full_name}:`);
                console.log(`  - Email –≤ –ë–î: ${user.email}`);
                console.log(`  - –ê–∫—Ç–∏–≤–µ–Ω: ${user.is_active}`);
                console.log(`  - –ú–æ–∂–µ—Ç –≤–æ–π—Ç–∏ —Å –ø–∞—Ä–æ–ª–µ–º: ${defaultPassword}`);
            } else {
                console.log(`\n‚ùå ${email} - –ù–ï –ù–ê–ô–î–ï–ù`);
            }
        }
        
        console.log('\n‚úÖ –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ GIP —Ç–µ–ø–µ—Ä—å –º–æ–≥—É—Ç –≤—Ö–æ–¥–∏—Ç—å —Å –ø–∞—Ä–æ–ª–µ–º: tcyp2025');
        console.log('üìù –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ email –±–µ–∑ —É—á–µ—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞:', error);
    } finally {
        await pool.end();
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º
fixLoginIssue();