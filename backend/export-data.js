const sqlite3 = require('sqlite3').verbose();
const path = require('path');
const fs = require('fs');

// –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
const db = new sqlite3.Database(path.join(__dirname, 'database', 'tcyp_coins.db'));

const exportData = () => {
    console.log('üìä –ù–∞—á–∏–Ω–∞–µ–º —ç–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î...\n');
    
    const exportData = {
        timestamp: new Date().toISOString(),
        tables: {}
    };
    
    // –°–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ (–≤–∞–∂–µ–Ω –ø–æ—Ä—è–¥–æ–∫ –∏–∑-–∑–∞ foreign keys)
    const tables = [
        'users',
        'transactions', 
        'requests',
        'admin_actions',
        'roulette_winners'
    ];
    
    let completedTables = 0;
    
    tables.forEach(tableName => {
        db.all(`SELECT * FROM ${tableName}`, (err, rows) => {
            if (err) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ —Ç–∞–±–ª–∏—Ü—ã ${tableName}:`, err);
            } else {
                exportData.tables[tableName] = rows;
                console.log(`‚úÖ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –∏–∑ ${tableName}: ${rows.length} –∑–∞–ø–∏—Å–µ–π`);
            }
            
            completedTables++;
            
            // –ö–æ–≥–¥–∞ –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã
            if (completedTables === tables.length) {
                const fileName = `backup_${new Date().toISOString().replace(/[:.]/g, '-')}.json`;
                const filePath = path.join(__dirname, 'backups', fileName);
                
                // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É backups –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
                if (!fs.existsSync(path.join(__dirname, 'backups'))) {
                    fs.mkdirSync(path.join(__dirname, 'backups'));
                }
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
                fs.writeFileSync(filePath, JSON.stringify(exportData, null, 2));
                
                console.log('\n' + '='.repeat(50));
                console.log('‚úÖ –≠–ö–°–ü–û–†–¢ –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!');
                console.log('='.repeat(50));
                console.log(`üìÅ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${fileName}`);
                console.log(`üìç –ü—É—Ç—å: ${filePath}`);
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞:');
                Object.entries(exportData.tables).forEach(([table, data]) => {
                    console.log(`  - ${table}: ${data.length} –∑–∞–ø–∏—Å–µ–π`);
                });
                
                // –¢–∞–∫–∂–µ —Å–æ–∑–¥–∞–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é —Ç–æ–ª—å–∫–æ —Å –≤–∞–∂–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
                const minimalExport = {
                    timestamp: exportData.timestamp,
                    users: exportData.tables.users.map(u => ({
                        email: u.email,
                        full_name: u.full_name,
                        balance: u.balance,
                        is_admin: u.is_admin,
                        position: u.position,
                        department: u.department
                    })),
                    transactions: exportData.tables.transactions,
                    requests: exportData.tables.requests
                };
                
                const minimalFileName = `backup_minimal_${new Date().toISOString().replace(/[:.]/g, '-')}.json`;
                fs.writeFileSync(path.join(__dirname, 'backups', minimalFileName), JSON.stringify(minimalExport, null, 2));
                console.log(`\nüìÑ –¢–∞–∫–∂–µ —Å–æ–∑–¥–∞–Ω –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±—ç–∫–∞–ø: ${minimalFileName}`);
                
                db.close();
            }
        });
    });
};

// –ó–∞–ø—É—Å–∫–∞–µ–º —ç–∫—Å–ø–æ—Ä—Ç
if (require.main === module) {
    exportData();
}

module.exports = { exportData };