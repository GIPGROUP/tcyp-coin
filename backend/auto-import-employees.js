const { dbGet, dbRun, dbAll } = require('./database/db');
const bcrypt = require('bcryptjs');

// –î–∞–Ω–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ (–æ–±–Ω–æ–≤–ª–µ–Ω—ã —Å–æ–≥–ª–∞—Å–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–º—É —Å–ø–∏—Å–∫—É)
const EMPLOYEES_DATA = [
    { email: "Gujovaod@gip.su", lastName: "–ì—É–∂–æ–≤–∞", firstName: "–û–ª–µ—Å—è", middleName: "–î–µ–Ω–∏—Å–æ–≤–Ω–∞", position: "–ò–Ω–∂–µ–Ω–µ—Ä-–∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä" },
    { email: "saukouma@gip.su", lastName: "–°–∞–≤–∫–æ–≤", firstName: "–ù–∏–∫–∏—Ç–∞", middleName: "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á", position: "" },
    { email: "firsovas@gip.su", lastName: "–§–∏—Ä—Å–æ–≤", firstName: "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä", middleName: "", position: "" },
    { email: "morozovada@gip.su", lastName: "–ú–æ—Ä–æ–∑–æ–≤–∞", firstName: "–î–∞—à–∞", middleName: "–ê–Ω–¥—Ä–µ–µ–≤–Ω–∞", position: "" },
    { email: "sadrtdinovayuyu@gip.su", lastName: "–°–∞–¥—Ä—Ç–¥–∏–Ω–æ–≤–∞", firstName: "–Æ–ª–∏—è", middleName: "–ò–≥–æ—Ä–µ–≤–Ω–∞", position: "–ò–Ω–∂–µ–Ω–µ—Ä-–∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä" },
    { email: "manckovama@gip.su", lastName: "–ú–∞–Ω—å–∫–æ–≤–∞", firstName: "–ú–∞—Ä–∏–Ω–∞", middleName: "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–Ω–∞", position: "–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å —Ü–∏—Ñ—Ä–æ–≤—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π" },
    { email: "alexeevaar@gip.su", lastName: "–ê–ª–µ–∫—Å–µ–µ–≤–∞", firstName: "–ê—Ä–∏–Ω–∞", middleName: "", position: "" },
    { email: "maa@gip.su", lastName: "–ê–ª–∏–∫–∞–¥–∏–µ–≤", firstName: "–ú—É—Ä–∞–¥", middleName: "", position: "" },
    { email: "kuprikovvn@gip.su", lastName: "–ö—É–ø—Ä–∏–∫–æ–≤", firstName: "–í–ª–∞–¥–∏–º–∏—Ä", middleName: "", position: "" },
    { email: "mingazovakr@gip.su", lastName: "–ú–∏–Ω–≥–∞–∑–æ–≤–∞", firstName: "–ö–∞–º–∏–ª–∞", middleName: "–†–∞–º–∏–ª–µ–≤–Ω–∞", position: "–ò–Ω–∂–µ–Ω–µ—Ä-–∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä" },
    { email: "smirnovamu@gip.su", lastName: "–°–º–∏—Ä–Ω–æ–≤–∞", firstName: "–ú–∞—Ä–∏—è", middleName: "", position: "" },
    { email: "maizengerae@gip.su", lastName: "–ú–∞–π–∑–µ–Ω–≥–µ—Ä", firstName: "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä", middleName: "", position: "" },
    { email: "m.a.antonova@gip.su", lastName: "–ê–Ω—Ç–æ–Ω–æ–≤–∞", firstName: "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä–∞", middleName: "", position: "" },
    { email: "duseevgr@gip.su", lastName: "–î—É—Å–µ–µ–≤", firstName: "–ì–ª–µ–±", middleName: "–õ—å–≤–æ–≤–∏—á", position: "–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –ü–û" },
    { email: "rizhonkovaaa@gip.su", lastName: "–†—ã–∂–æ–Ω–∫–æ–≤–∞", firstName: "–ê–ª–∏–Ω–∞", middleName: "–ï–≤–≥–µ–Ω—å–µ–≤–Ω–∞", position: "–ò–Ω–∂–µ–Ω–µ—Ä-–∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä" },
    { email: "sfs@gip.su", lastName: "–®–∞–Ω–≥–∏–Ω", firstName: "–°–µ—Ä–≥–µ–π", middleName: "–§–µ–ª–∏–∫—Å–æ–≤–∏—á", position: "" },
    { email: "erushevkv@gip.su", lastName: "–ï—Ä—É—à–µ–≤", firstName: "–ö–∏—Ä–∏–ª–ª", middleName: "", position: "" },
    { email: "latfullinaa@gip.su", lastName: "–õ–∞—Ç—Ñ—É–ª–ª–∏–Ω", firstName: "–ê–ª–∏—Ö–∞–Ω", middleName: "–ê–π—Ä–∞—Ç–æ–≤–∏—á", position: "" },
    { email: "zemlikakovadd@gip.su", lastName: "–ó–µ–º–ª—è–∫–æ–≤–∞", firstName: "–î–∞—Ä—å—è", middleName: "", position: "" },
    { email: "feduloves@gip.su", lastName: "–§–µ–¥—É–ª–æ–≤", firstName: "–ï–≤–≥–µ–Ω–∏–π", middleName: "–°–µ—Ä–≥–µ–µ–≤–∏—á", position: "–î–∏—Ä–µ–∫—Ç–æ—Ä –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞ –Ω–∞—É—á–Ω—ã—Ö —Ä–∞–∑—Ä–∞–±–æ—Ç–æ–∫ –∏ –≤–Ω–µ–¥—Ä–µ–Ω–∏—è, —Å–æ–æ—É—á—Ä–µ–¥–∏—Ç–µ–ª—å GIP GROUP" },
    { email: "malyshevamj@gip.su", lastName: "–ú–∞–ª—ã—à–µ–≤–∞", firstName: "–ú–∞—Ä–∏–Ω–∞", middleName: "–†–æ–º–∞–Ω–æ–≤–Ω–∞", position: "–ò–Ω–∂–µ–Ω–µ—Ä-–∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä" },
    { email: "veselovama@gip.su", lastName: "–í–µ—Å–µ–ª–æ–≤–∞", firstName: "–ú–∞—Ä–∏–Ω–∞", middleName: "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–Ω–∞", position: "–ì–ò–ü,—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –ø—Ä–æ–µ–∫—Ç–æ–≤ –ö–†, –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ GIP GROUP" },
    { email: "ritikovka@gip.su", lastName: "–†—ã—Ç–∏–∫–æ–≤", firstName: "–ö–∏—Ä–∏–ª–ª", middleName: "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á", position: "–ò–Ω–∂–µ–Ω–µ—Ä-–∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä" },
    { email: "shvedchikovatv@gip.su", lastName: "–®–≤–µ–¥—á–∏–∫–æ–≤–∞", firstName: "–¢–∞—Ç—å—è–Ω–∞", middleName: "–í–ª–∞–¥–∏–º–∏—Ä–æ–≤–Ω–∞", position: "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø—Ä–æ–µ–∫—Ç–æ–≤" },
    { email: "prozorovakd@gip.su", lastName: "–ü—Ä–æ–∑–æ—Ä–æ–≤–∞", firstName: "–ö—Å–µ–Ω–∏—è", middleName: "–û–ª–µ–≥–æ–≤–Ω–∞", position: "–ò–Ω–∂–µ–Ω–µ—Ä-–∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä" },
    { email: "pa.smirnova@gip.su", lastName: "–°–º–∏—Ä–Ω–æ–≤–∞", firstName: "–ü–æ–ª–∏–Ω–∞", middleName: "–ê–ª–µ–∫—Å–µ–µ–≤–Ω–∞", position: "–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –≥—Ä—É–ø–ø—ã –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–π" },
    { email: "m.a.latyshev@gip.su", lastName: "–õ–∞—Ç—ã—à–µ–≤", firstName: "–ú–∞–∫—Å–∏–º", middleName: "–ê–Ω–¥—Ä–µ–µ–≤–∏—á", position: "–ò–Ω–∂–µ–Ω–µ—Ä-–∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä" },
    { email: "ai.velikanova@gip.su", lastName: "–í–µ–ª–∏–∫–∞–Ω–æ–≤–∞", firstName: "–ê–Ω–Ω–∞", middleName: "–ò–≥–æ—Ä–µ–≤–Ω–∞", position: "–ø–æ–º–æ—â–Ω–∏–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –∏–Ω–∂–µ–Ω–µ—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞" },
    { email: "yu.m.udalov@gip.su", lastName: "–£–¥–∞–ª–æ–≤", firstName: "–Æ—Ä–∏–π", middleName: "–ú–∏—Ö–∞–π–ª–æ–≤–∏—á", position: "–ù–∞—á–∞–ª—å–Ω–∏–∫ –æ—Ç–¥–µ–ª–∞ –∏–∑—ã—Å–∫–∞–Ω–∏–π" },
    { email: "i.a.ovchinnikov@gip.su", lastName: "–û–≤—á–∏–Ω–Ω–∏–∫–æ–≤", firstName: "–ò–≥–æ—Ä—å", middleName: "–ê–ª–µ–∫—Å–µ–µ–≤–∏—á", position: "–ò–Ω–∂–µ–Ω–µ—Ä-–∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä" },
    { email: "d.m.udalov@gip.su", lastName: "–£–¥–∞–ª–æ–≤", firstName: "–î–º–∏—Ç—Ä–∏–π", middleName: "–ú–∏—Ö–∞–π–ª–æ–≤–∏—á", position: "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –¥–∏—Ä–µ–∫—Ç–æ—Ä" },
    { email: "a.s.shekhovtsov@gip.su", lastName: "–®–µ—Ö–æ–≤—Ü–æ–≤", firstName: "–ê–ª–µ–∫—Å–µ–π", middleName: "–°–µ—Ä–≥–µ–µ–≤–∏—á", position: "—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –∏ —É—á—Ä–µ–¥–∏—Ç–µ–ª—å GIP GROUP" },
    { email: "f.i.kochankin@gip.su", lastName: "–ö–æ—á–∞–Ω–∫–∏–Ω", firstName: "–§–æ–º–∞", middleName: "–ò–≤–∞–Ω–æ–≤–∏—á", position: "" },
    { email: "korepanovda@gip.su", lastName: "–ö–æ—Ä–µ–ø–∞–Ω–æ–≤", firstName: "–î–∞–Ω–∏–ª", middleName: "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á", position: "–∏–Ω–∂–µ–Ω–µ—Ä-–∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä" },
    { email: "k.e.ishchenko@gip.su", lastName: "–ò—â–µ–Ω–∫–æ", firstName: "–ö—Ä–∏—Å—Ç–∏–Ω–∞", middleName: "–≠–¥—É–∞—Ä–¥–æ–≤–Ω–∞", position: "–ò–Ω–∂–µ–Ω–µ—Ä-–∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä" },
    { email: "savinkinave@gip.su", lastName: "–°–∞–≤–∏–Ω–∫–∏–Ω–∞", firstName: "–í–∞–ª–µ—Ä–∏—è", middleName: "", position: "–ú–µ–Ω–µ–¥–∂–µ—Ä", isAdmin: true }
];

async function autoImportEmployees() {
    try {
        console.log('üöÄ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤...\n');
        
        // –°–Ω–∞—á–∞–ª–∞ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        console.log('üîß –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
        const defaultPassword = 'tcyp2025';
        const hashedPassword = await bcrypt.hash(defaultPassword, 10);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –í–°–ï–• –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π GIP - —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–æ–ª—å –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º
        const updateResult = await dbRun(`
            UPDATE users 
            SET password_hash = ?, is_active = true 
            WHERE email LIKE ?
        `, [hashedPassword, '%@gip.su']);
        
        console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω—ã –ø–∞—Ä–æ–ª–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π GIP`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–µ–∞–ª—å–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ (–Ω–µ —Ç–µ—Å—Ç–æ–≤—ã–µ)
        const realEmployees = await dbGet('SELECT COUNT(*) as count FROM users WHERE email LIKE ?', ['%@gip.su']);
        
        if (realEmployees && realEmployees.count > 0) {
            console.log(`‚úÖ –í –ë–î —É–∂–µ –µ—Å—Ç—å ${realEmployees.count} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ GIP`);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã
            const inactiveCount = await dbGet('SELECT COUNT(*) as count FROM users WHERE email LIKE ? AND is_active = false', ['%@gip.su']);
            if (inactiveCount && inactiveCount.count > 0) {
                console.log(`‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω–æ ${inactiveCount.count} –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º...`);
                await dbRun('UPDATE users SET is_active = true WHERE email LIKE ?', ['%@gip.su']);
            }
            
            return;
        }
        
        console.log('üì• –ù–∞—á–∏–Ω–∞–µ–º –∏–º–ø–æ—Ä—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ GIP...');
        
        const password = 'tcyp2025';
        const hashedPasswordNew = await bcrypt.hash(password, 10);
        
        let successCount = 0;
        let errorCount = 0;
        
        for (const emp of EMPLOYEES_DATA) {
            try {
                const fullName = `${emp.lastName} ${emp.firstName} ${emp.middleName}`.trim();
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                const existing = await dbGet('SELECT id FROM users WHERE email = ?', [emp.email]);
                
                if (existing) {
                    continue;
                }
                
                // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                await dbRun(`
                    INSERT INTO users (email, password_hash, full_name, position, department, is_admin, balance, is_active)
                    VALUES (?, ?, ?, ?, ?, ?, ?, ?)
                `, [
                    emp.email,
                    hashedPasswordNew,
                    fullName,
                    emp.position || '',
                    '–¢–¶–£–ü',
                    emp.isAdmin || false,
                    0,
                    true
                ]);
                
                successCount++;
                
                if (emp.isAdmin) {
                    console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: ${fullName}`);
                }
                
            } catch (error) {
                errorCount++;
                console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ ${emp.email}:`, error.message);
            }
        }
        
        if (successCount > 0) {
            console.log(`\n‚úÖ –£—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: ${successCount} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤`);
            console.log(`üìß –ü–∞—Ä–æ–ª—å –¥–ª—è –≤—Å–µ—Ö: ${password}`);
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
            const admins = await dbAll('SELECT email, full_name FROM users WHERE is_admin = true');
            console.log('\nüëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã:');
            admins.forEach(admin => {
                console.log(`  - ${admin.full_name} (${admin.email})`);
            });
        }
        
    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–∏–º–ø–æ—Ä—Ç–µ:', error);
        throw error;
    }
}

module.exports = { autoImportEmployees };