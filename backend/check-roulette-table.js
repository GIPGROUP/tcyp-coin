require('dotenv').config();
const { dbAll } = require('./database/db');

async function checkRouletteTable() {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü—ã roulette_winners...\n');
    
    try {
        const isPostgreSQL = process.env.NODE_ENV === 'production' && process.env.DATABASE_URL;
        
        if (isPostgreSQL) {
            // –î–ª—è PostgreSQL
            const { pool } = require('./database/db-postgres');
            
            const columns = await pool.query(`
                SELECT column_name, data_type, is_nullable
                FROM information_schema.columns 
                WHERE table_name = 'roulette_winners'
                ORDER BY ordinal_position
            `);
            
            console.log('üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã roulette_winners –≤ PostgreSQL:');
            console.log('=' .repeat(50));
            columns.rows.forEach(col => {
                console.log(`  - ${col.column_name}: ${col.data_type} (nullable: ${col.is_nullable})`);
            });
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ
            const winners = await pool.query('SELECT * FROM roulette_winners ORDER BY created_at DESC LIMIT 5');
            console.log(`\nüìä –ó–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ: ${winners.rowCount}`);
            
            await pool.end();
        } else {
            // –î–ª—è SQLite
            const tableInfo = await dbAll("PRAGMA table_info(roulette_winners)");
            
            console.log('üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã roulette_winners –≤ SQLite:');
            console.log('=' .repeat(50));
            tableInfo.forEach(col => {
                console.log(`  - ${col.name}: ${col.type} (nullable: ${!col.notnull})`);
            });
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ
            const winners = await dbAll('SELECT * FROM roulette_winners ORDER BY created_at DESC LIMIT 5');
            console.log(`\nüìä –ó–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ: ${winners.length}`);
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞:', error);
    }
    
    process.exit(0);
}

// –ó–∞–ø—É—Å–∫–∞–µ–º
checkRouletteTable();