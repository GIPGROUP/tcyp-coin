const { pool, dbRun } = require('./database/db-postgres');
const bcrypt = require('bcryptjs');
const fs = require('fs');
const path = require('path');

// –ü—É—Ç—å –∫ JSON —Ñ–∞–π–ª—É - –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å
const JSON_FILE_PATH = path.join(__dirname, 'data', 'employees.json');

// –û–±—â–∏–π –ø–∞—Ä–æ–ª—å –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const DEFAULT_PASSWORD = 'tcyp2025';

// –î–∞–Ω–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ (–≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –≤ –∫–æ–¥ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞)
const EMPLOYEES_DATA = [
    { email: "Gujovaod@gip.su", lastName: "–ì—É–∂–æ–≤–∞", firstName: "–û–ª–µ—Å—è", middleName: "–î–µ–Ω–∏—Å–æ–≤–Ω–∞", position: "–ò–Ω–∂–µ–Ω–µ—Ä-–∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä" },
    { email: "saukouma@gip.su", lastName: "–°–∞–≤–∫–æ–≤", firstName: "–ù–∏–∫–∏—Ç–∞", middleName: "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á", position: "–ò–Ω–∂–µ–Ω–µ—Ä" },
    { email: "top_solution@gip.su", lastName: "–ë—É—Ö–≥–∞–ª—Ç–µ—Ä", firstName: "–ò—Ä–∏–Ω–∞", middleName: "", position: "–ë—É—Ö–≥–∞–ª—Ç–µ—Ä" },
    { email: "milurmih@gip.su", lastName: "–ú–∏—Ö–∞–π–ª–æ–≤–∞", firstName: "–í–∞–ª–µ–Ω—Ç–∏–Ω–∞", middleName: "–Æ—Ä—å–µ–≤–Ω–∞", position: "–ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä" },
    { email: "firsovas@gip.su", lastName: "–§–∏—Ä—Å–æ–≤", firstName: "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä", middleName: "", position: "–ò–Ω–∂–µ–Ω–µ—Ä" },
    { email: "morozovada@gip.su", lastName: "–ú–æ—Ä–æ–∑–æ–≤–∞", firstName: "–î–∞—à–∞", middleName: "–ê–Ω–¥—Ä–µ–µ–≤–Ω–∞", position: "–ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä" },
    { email: "savinkinave@gip.su", lastName: "–°–∞–≤–∏–Ω–∫–∏–Ω–∞", firstName: "–í–∞–ª–µ—Ä–∏—è", middleName: "", position: "–ú–µ–Ω–µ–¥–∂–µ—Ä", isAdmin: true },
    { email: "sadrtdinovayuyu@gip.su", lastName: "–°–∞–¥—Ä—Ç–¥–∏–Ω–æ–≤–∞", firstName: "–Æ–ª–∏—è", middleName: "", position: "–ú–µ–Ω–µ–¥–∂–µ—Ä" },
    { email: "manckovama@gip.su", lastName: "–ú–∞–Ω—å–∫–æ–≤–∞", firstName: "–ú–∞—Ä–∏–Ω–∞", middleName: "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–Ω–∞", position: "–ò–Ω–∂–µ–Ω–µ—Ä" },
    { email: "alexeevaar@gip.su", lastName: "–ê–ª–µ–∫—Å–µ–µ–≤–∞", firstName: "–ê—Ä–∏–Ω–∞", middleName: "", position: "–ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä" },
    { email: "maa@gip.su", lastName: "–ê–ª–∏–∫–∞–¥–∏–µ–≤", firstName: "–ú—É—Ä–∞–¥", middleName: "", position: "–ì–µ–Ω–µ—Ä–∞–ª—å–Ω—ã–π –¥–∏—Ä–µ–∫—Ç–æ—Ä" },
    { email: "fes1@gip.su", lastName: "–§–µ–¥—É–ª–æ–≤", firstName: "–ï–≤–≥–µ–Ω–∏—è", middleName: "", position: "–ò–Ω–∂–µ–Ω–µ—Ä" },
    { email: "kuprikovvn@gip.su", lastName: "–ö—É–ø—Ä–∏–∫–æ–≤", firstName: "–í–ª–∞–¥–∏–º–∏—Ä", middleName: "", position: "–ò–Ω–∂–µ–Ω–µ—Ä" },
    { email: "mingazovakr@gip.su", lastName: "–ú–∏–Ω–≥–∞–∑–æ–≤–∞", firstName: "–ö–∞–º–∏–ª–∞", middleName: "–†–∞–º–∏–ª–µ–≤–Ω–∞", position: "–ò–Ω–∂–µ–Ω–µ—Ä" },
    { email: "smirnovamu@gip.su", lastName: "–°–º–∏—Ä–Ω–æ–≤–∞", firstName: "–ú–∞—Ä–∏—è", middleName: "", position: "–ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä" },
    { email: "vav@gip.su", lastName: "–í–µ—Ä–Ω—è–µ–≤–∞", firstName: "–ê–ª—ë–Ω–∞", middleName: "", position: "–ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä" },
    { email: "maizengerae@gip.su", lastName: "–ú–∞–π–∑–µ–Ω–≥–µ—Ä", firstName: "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä", middleName: "", position: "–ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä" },
    { email: "m.a.antonova@gip.su", lastName: "–ê–Ω—Ç–æ–Ω–æ–≤–∞", firstName: "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä–∞", middleName: "", position: "–ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä" },
    { email: "duseevgr@gip.su", lastName: "–î—É—Å–µ–µ–≤", firstName: "–ì–ª–µ–±", middleName: "", position: "–ì–ª–∞–≤–Ω—ã–π –∏–Ω–∂–µ–Ω–µ—Ä –ø—Ä–æ–µ–∫—Ç–∞" },
    { email: "rizhonkovaaa@gip.su", lastName: "–†—ã–∂–æ–Ω–∫–æ–≤–∞", firstName: "–ê–ª–∏–Ω–∞", middleName: "", position: "–ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä" },
    { email: "sfs@gip.su", lastName: "–®–∞–Ω–≥–∏–Ω", firstName: "–°–µ—Ä–≥–µ–π", middleName: "–§–µ–ª–∏–∫—Å–æ–≤–∏—á", position: "–ì–ª–∞–≤–Ω—ã–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç" },
    { email: "erushevkv@gip.su", lastName: "–ï—Ä—É—à–µ–≤", firstName: "–ö–∏—Ä–∏–ª–ª", middleName: "", position: "–ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä" },
    { email: "latfullinaa@gip.su", lastName: "–õ–∞—Ç—Ñ—É–ª–ª–∏–Ω", firstName: "–ê–ª–∏—Ö–∞–Ω", middleName: "–ê–π—Ä–∞—Ç–æ–≤–∏—á", position: "–ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä" },
    { email: "zemlikakovadd@gip.su", lastName: "–ó–µ–º–ª—è–∫–æ–≤–∞", firstName: "–î–∞—Ä—å—è", middleName: "", position: "–ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä" },
    { email: "frolenkovavv@gip.su", lastName: "–§—Ä–æ–ª–µ–Ω–∫–æ–≤–∞", firstName: "–í–∏–∫—Ç–æ—Ä–∏—è", middleName: "", position: "–ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä" },
    { email: "semchenkoyuv@gip.su", lastName: "–°–µ–º—á–µ–Ω–∫–æ", firstName: "–Æ–ª–∏—è", middleName: "", position: "–ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä" },
    { email: "feduloves@gip.su", lastName: "–§–µ–¥—É–ª–æ–≤", firstName: "–ï–≤–≥–µ–Ω–∏–π", middleName: "", position: "–ò–Ω–∂–µ–Ω–µ—Ä" },
    { email: "malyshevamj@gip.su", lastName: "–ú–∞–ª—ã—à–µ–≤–∞", firstName: "–ú–∞—Ä–∏–Ω–∞", middleName: "", position: "–ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä" },
    { email: "info@gip.su", lastName: "GIP GROUP", firstName: "–û—Ñ–∏—Å-–º–µ–Ω–µ–¥–∂–µ—Ä", middleName: "", position: "–û—Ñ–∏—Å-–º–µ–Ω–µ–¥–∂–µ—Ä" },
    { email: "trublinskayaka@gip.su", lastName: "–¢—Ä—É–±–ª–∏–Ω—Å–∫–∞—è", firstName: "–ö—Å–µ–Ω–∏—è", middleName: "", position: "–ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä" },
    { email: "veselovama@gip.su", lastName: "–í–µ—Å–µ–ª–æ–≤–∞", firstName: "–ú–∞—Ä–∏–Ω–∞", middleName: "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–Ω–∞", position: "–ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä" },
    { email: "mnv@gip.su", lastName: "–ú–µ–ª—å–Ω–∏–∫", firstName: "–ù–∞—Ç–∞–ª—å—è", middleName: "", position: "–ó–∞–º–µ—Å—Ç–∏—Ç–µ–ª—å –≥–µ–Ω–µ—Ä–∞–ª—å–Ω–æ–≥–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞" },
    { email: "ritikovka@gip.su", lastName: "–†—ã—Ç–∏–∫–æ–≤", firstName: "–ö–∏—Ä–∏–ª–ª", middleName: "", position: "–ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä" },
    { email: "shvedchikovatv@gip.su", lastName: "–®–≤–µ–¥—á–∏–∫–æ–≤–∞", firstName: "–¢–∞—Ç—å—è–Ω–∞", middleName: "–í–ª–∞–¥–∏–º–∏—Ä–æ–≤–Ω–∞", position: "–ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä" },
    { email: "prozorovakd@gip.su", lastName: "–ü—Ä–æ–∑–æ—Ä–æ–≤–∞", firstName: "–ö—Å–µ–Ω–∏—è", middleName: "", position: "–ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä" },
    { email: "pa.smirnova@gip.su", lastName: "–°–º–∏—Ä–Ω–æ–≤–∞", firstName: "–ü–æ–ª–∏–Ω–∞", middleName: "–ê–ª–µ–∫—Å–µ–µ–≤–Ω–∞", position: "–ò–Ω–∂–µ–Ω–µ—Ä" },
    { email: "m.a.latyshev@gip.su", lastName: "–õ–∞—Ç—ã—à–µ–≤", firstName: "–ú–∞–∫—Å–∏–º", middleName: "–ê–Ω–¥—Ä–µ–µ–≤–∏—á", position: "–ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä" },
    { email: "ai.velikanova@gip.su", lastName: "–í–µ–ª–∏–∫–∞–Ω–æ–≤–∞", firstName: "–ê–Ω–Ω–∞", middleName: "–ò–≥–æ—Ä–µ–≤–Ω–∞", position: "–ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä" },
    { email: "yu.m.udalov@gip.su", lastName: "–£–¥–∞–ª–æ–≤", firstName: "–Æ—Ä–∏–π", middleName: "–ú–∏—Ö–∞–π–ª–æ–≤–∏—á", position: "–ò–Ω–∂–µ–Ω–µ—Ä" },
    { email: "postanen.s.v@gip.su", lastName: "–ü–æ—Å—Ç–∞–Ω–µ–Ω", firstName: "–°–µ—Ä–≥–µ–π", middleName: "", position: "–ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä" },
    { email: "av.serishev@gip.su", lastName: "–°–µ—Ä—ã—à–µ–≤", firstName: "–ê–ª–µ–∫—Å–µ–π", middleName: "–í–∏–∫—Ç—Ä–æ–≤–∏—á", position: "–ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä" },
    { email: "i.a.ovchinnikov@gip.su", lastName: "–û–≤—á–∏–Ω–Ω–∏–∫–æ–≤", firstName: "–ò–≥–æ—Ä—å", middleName: "", position: "–ì–ª–∞–≤–Ω—ã–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä –ø—Ä–æ–µ–∫—Ç–∞" },
    { email: "d.m.udalov@gip.su", lastName: "–£–¥–∞–ª–æ–≤", firstName: "–î–º–∏—Ç—Ä–∏–π", middleName: "–ú–∏—Ö–∞–π–ª–æ–≤–∏—á", position: "–ò–Ω–∂–µ–Ω–µ—Ä" },
    { email: "a.s.shekhovtsov@gip.su", lastName: "–®–µ—Ö–æ–≤—Ü–æ–≤", firstName: "–ê–ª–µ–∫—Å–µ–π", middleName: "–°–µ—Ä–≥–µ–µ–≤–∏—á", position: "–ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä" },
    { email: "feduloves@gip.su", lastName: "–§–µ–¥—É–ª–æ–≤", firstName: "–ï–≤–≥–µ–Ω–∏–π", middleName: "–°–µ—Ä–≥–µ–µ–≤–∏—á", position: "–ò–Ω–∂–µ–Ω–µ—Ä" },
    { email: "f.i.kochankin@gip.su", lastName: "–ö–æ—á–∞–Ω–∫–∏–Ω", firstName: "–§–æ–º–∞", middleName: "–ò–≤–∞–Ω–æ–≤–∏—á", position: "–ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä" },
    { email: "korepanovda@gip.su", lastName: "–ö–æ—Ä–µ–ø–∞–Ω–æ–≤", firstName: "–î–∞–Ω–∏–ª", middleName: "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á", position: "–ò–Ω–∂–µ–Ω–µ—Ä" },
    { email: "k.e.ishchenko@gip.su", lastName: "–ò—â–µ–Ω–∫–æ", firstName: "–ö—Ä–∏—Å—Ç–∏–Ω–∞", middleName: "–≠–¥—É–∞—Ä–¥–æ–≤–Ω–∞", position: "–ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä" }
];

async function importEmployeesPostgreSQL() {
    try {
        console.log('üì• –ù–∞—á–∏–Ω–∞–µ–º –∏–º–ø–æ—Ä—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –≤ PostgreSQL...');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        const userCountResult = await pool.query('SELECT COUNT(*) FROM users');
        const existingUserCount = parseInt(userCountResult.rows[0].count);
        
        if (existingUserCount > 10) { // –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –º–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            console.log(`‚úÖ –í –ë–î —É–∂–µ –µ—Å—Ç—å ${existingUserCount} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–º–ø–æ—Ä—Ç`);
            return;
        }
        
        // –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å –æ–¥–∏–Ω —Ä–∞–∑
        const hashedPassword = await bcrypt.hash(DEFAULT_PASSWORD, 10);
        
        let importedCount = 0;
        let skippedCount = 0;
        
        console.log(`üìã –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º ${EMPLOYEES_DATA.length} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤...`);
        
        for (const employee of EMPLOYEES_DATA) {
            try {
                const fullName = `${employee.lastName} ${employee.firstName} ${employee.middleName}`.trim();
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                const existingUser = await pool.query(
                    'SELECT id FROM users WHERE email = $1',
                    [employee.email]
                );
                
                if (existingUser.rows.length > 0) {
                    skippedCount++;
                    continue;
                }
                
                // –í—Å—Ç–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                await dbRun(`
                    INSERT INTO users (email, password_hash, full_name, position, department, is_admin, balance)
                    VALUES (?, ?, ?, ?, ?, ?, ?)
                `, [
                    employee.email,
                    hashedPassword,
                    fullName,
                    employee.position,
                    '–¢–¶–£–ü',
                    employee.isAdmin || false,
                    0
                ]);
                
                importedCount++;
                
                if (employee.isAdmin) {
                    console.log(`  üîë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: ${fullName}`);
                }
                
                if (importedCount % 10 === 0) {
                    console.log(`  ‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${importedCount} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤...`);
                }
                
            } catch (error) {
                console.error(`  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ ${employee.email}:`, error.message);
            }
        }
        
        console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–º–ø–æ—Ä—Ç–∞:');
        console.log(`  ‚úÖ –£—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: ${importedCount}`);
        console.log(`  ‚ö†Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ (—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç): ${skippedCount}`);
        console.log(`  üìß –ü–∞—Ä–æ–ª—å –¥–ª—è –≤—Å–µ—Ö: ${DEFAULT_PASSWORD}`);
        
        // –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        const finalCount = await pool.query('SELECT COUNT(*) FROM users');
        const adminCount = await pool.query('SELECT COUNT(*) FROM users WHERE is_admin = true');
        
        console.log(`\nüìä –ò—Ç–æ–≥–æ –≤ –ë–î:`);
        console.log(`  üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${finalCount.rows[0].count}`);
        console.log(`  üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: ${adminCount.rows[0].count}`);
        
    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ:', error);
        throw error;
    }
}

// –ï—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
    importEmployeesPostgreSQL()
        .then(() => {
            console.log('\n‚úÖ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!');
            process.exit(0);
        })
        .catch(error => {
            console.error('‚ùå –û—à–∏–±–∫–∞:', error);
            process.exit(1);
        });
}

module.exports = { importEmployeesPostgreSQL };