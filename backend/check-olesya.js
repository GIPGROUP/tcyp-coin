require('dotenv').config();
const bcrypt = require('bcryptjs');

async function checkOlesya() {
    const isPostgreSQL = process.env.NODE_ENV === 'production' && process.env.DATABASE_URL;
    
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –û–ª–µ—Å–∏ –ì—É–∂–æ–≤–æ–π...\n');
    console.log(`üìã –û–∫—Ä—É–∂–µ–Ω–∏–µ: ${isPostgreSQL ? 'PostgreSQL (Production)' : 'SQLite (Local)'}`);
    
    if (isPostgreSQL) {
        const { pool } = require('./database/db-postgres');
        
        try {
            // –ò—â–µ–º –ø–æ —Ä–∞–∑–Ω—ã–º –≤–∞—Ä–∏–∞–Ω—Ç–∞–º email
            const emails = [
                'Gujovaod@gip.su',
                'gujovaod@gip.su',
                'GUJOVAOD@GIP.SU'
            ];
            
            console.log('üîç –ü–æ–∏—Å–∫ –ø–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º email:');
            for (const email of emails) {
                const result = await pool.query(
                    'SELECT id, email, full_name, is_active, password_hash FROM users WHERE email = $1',
                    [email]
                );
                
                if (result.rows.length > 0) {
                    const user = result.rows[0];
                    console.log(`\n‚úÖ –ù–ê–ô–î–ï–ù —Å email: ${email}`);
                    console.log(`  - ID: ${user.id}`);
                    console.log(`  - Email –≤ –ë–î: ${user.email}`);
                    console.log(`  - –§–ò–û: ${user.full_name}`);
                    console.log(`  - –ê–∫—Ç–∏–≤–µ–Ω: ${user.is_active}`);
                    console.log(`  - –ï—Å—Ç—å —Ö–µ—à –ø–∞—Ä–æ–ª—è: ${user.password_hash ? '–î–ê' : '–ù–ï–¢'}`);
                    
                    if (user.password_hash) {
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
                        const isValid = await bcrypt.compare('tcyp2025', user.password_hash);
                        console.log(`  - –ü–∞—Ä–æ–ª—å tcyp2025 –≤–∞–ª–∏–¥–µ–Ω: ${isValid ? '–î–ê' : '–ù–ï–¢'}`);
                        
                        if (!isValid) {
                            // –ü—Ä–æ–±—É–µ–º –¥—Ä—É–≥–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
                            const otherPasswords = ['password123', 'admin123', 'tcyp2024'];
                            for (const pwd of otherPasswords) {
                                const valid = await bcrypt.compare(pwd, user.password_hash);
                                if (valid) {
                                    console.log(`  - ‚ö†Ô∏è  –†–∞–±–æ—Ç–∞–µ—Ç –ø–∞—Ä–æ–ª—å: ${pwd}`);
                                }
                            }
                        }
                    }
                    
                    return;
                }
            }
            
            console.log('\n‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ù–ï –ù–ê–ô–î–ï–ù –Ω–∏ –ø–æ –æ–¥–Ω–æ–º—É –≤–∞—Ä–∏–∞–Ω—Ç—É email!');
            
            // –ò—â–µ–º –ø–æ—Ö–æ–∂–∏—Ö
            console.log('\nüîç –ü–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:');
            const similar = await pool.query(
                `SELECT email, full_name, is_active 
                 FROM users 
                 WHERE email ILIKE '%gujova%' OR email ILIKE '%gip.su%'
                 ORDER BY email
                 LIMIT 10`
            );
            
            if (similar.rows.length > 0) {
                console.log('–ù–∞–π–¥–µ–Ω—ã –ø–æ—Ö–æ–∂–∏–µ:');
                similar.rows.forEach(u => {
                    console.log(`  - ${u.email} (${u.full_name}) - –∞–∫—Ç–∏–≤–µ–Ω: ${u.is_active}`);
                });
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä email
            console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫ —Ä–µ–≥–∏—Å—Ç—Ä—É:');
            const caseCheck = await pool.query(
                `SELECT email, full_name 
                 FROM users 
                 WHERE LOWER(email) = LOWER($1)`,
                ['Gujovaod@gip.su']
            );
            
            if (caseCheck.rows.length > 0) {
                console.log('‚úÖ –ù–∞–π–¥–µ–Ω —Å —É—á–µ—Ç–æ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞:');
                caseCheck.rows.forEach(u => {
                    console.log(`  - Email –≤ –ë–î: "${u.email}" (–æ–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä!)`);
                });
            }
            
            await pool.end();
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞:', error);
        }
    } else {
        // –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π SQLite
        const { dbGet, dbAll } = require('./database/db');
        
        try {
            const user = await dbGet(
                'SELECT * FROM users WHERE LOWER(email) = LOWER(?)',
                ['Gujovaod@gip.su']
            );
            
            if (user) {
                console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –≤ SQLite');
                console.log(`  - Email: ${user.email}`);
                console.log(`  - –§–ò–û: ${user.full_name}`);
                console.log(`  - –ê–∫—Ç–∏–≤–µ–Ω: ${user.is_active}`);
            } else {
                console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞:', error);
        }
    }
    
    process.exit(0);
}

// –ó–∞–ø—É—Å–∫–∞–µ–º
checkOlesya();