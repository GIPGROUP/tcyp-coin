require('dotenv').config();
const { dbGet, dbRun } = require('./database/db');
const bcrypt = require('bcryptjs');

async function resetUserPassword() {
    const email = process.argv[2];
    const newPassword = process.argv[3] || 'tcyp2025';
    
    if (!email) {
        console.log('‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node reset-user-password.js <email> [–Ω–æ–≤—ã–π_–ø–∞—Ä–æ–ª—å]');
        console.log('   –ü—Ä–∏–º–µ—Ä: node reset-user-password.js Gujovaod@gip.su');
        console.log('   –ü—Ä–∏–º–µ—Ä: node reset-user-password.js Gujovaod@gip.su myNewPassword123');
        process.exit(1);
    }
    
    try {
        console.log(`üîç –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å email: ${email}`);
        
        // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const user = await dbGet('SELECT * FROM users WHERE LOWER(email) = LOWER(?)', [email]);
        
        if (!user) {
            console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!');
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Ö–æ–∂–∏–µ email
            const similar = await dbGet(`
                SELECT email, full_name 
                FROM users 
                WHERE LOWER(email) LIKE LOWER(?)
                LIMIT 5
            `, [`%${email.split('@')[0]}%`]);
            
            if (similar) {
                console.log('\nüìã –í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –∏–º–µ–ª–∏ –≤ –≤–∏–¥—É:');
                console.log(`  - ${similar.email} (${similar.full_name})`);
            }
            
            process.exit(1);
        }
        
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω: ${user.full_name} (${user.email})`);
        console.log(`  - ID: ${user.id}`);
        console.log(`  - –ê–∫—Ç–∏–≤–µ–Ω: ${user.is_active}`);
        console.log(`  - –ê–¥–º–∏–Ω: ${user.is_admin}`);
        
        // –•–µ—à–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å
        const hashedPassword = await bcrypt.hash(newPassword, 10);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å
        await dbRun(
            'UPDATE users SET password_hash = ? WHERE id = ?',
            [hashedPassword, user.id]
        );
        
        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω, –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –µ–≥–æ
        if (!user.is_active) {
            await dbRun(
                'UPDATE users SET is_active = true WHERE id = ?',
                [user.id]
            );
            console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω');
        }
        
        console.log(`\n‚úÖ –ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!`);
        console.log(`üìß Email: ${user.email}`);
        console.log(`üîë –ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å: ${newPassword}`);
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞:', error);
    }
    
    process.exit(0);
}

// –ó–∞–ø—É—Å–∫–∞–µ–º
resetUserPassword();