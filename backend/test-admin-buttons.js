require('dotenv').config();
const axios = require('axios');

// URL –≤–∞—à–µ–≥–æ API
const API_URL = process.env.NODE_ENV === 'production' 
    ? 'https://tcyp-coin.onrender.com/api'
    : 'http://localhost:3000/api';

// –¢–æ–∫–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —á–µ—Ä–µ–∑ –ª–æ–≥–∏–Ω)
let adminToken = '';

async function loginAsAdmin() {
    try {
        const response = await axios.post(`${API_URL}/auth/login`, {
            email: 'admin@tcyp.ru',
            password: 'admin123'
        });
        adminToken = response.data.token;
        console.log('‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä');
        return true;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', error.response?.data || error.message);
        return false;
    }
}

async function getEmployees() {
    try {
        const response = await axios.get(`${API_URL}/admin/employees`, {
            headers: { Authorization: `Bearer ${adminToken}` }
        });
        console.log('\nüìã –°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:');
        response.data.forEach(emp => {
            console.log(`  - ${emp.full_name} (ID: ${emp.id}, –ë–∞–ª–∞–Ω—Å: ${emp.coins})`);
        });
        return response.data;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:', error.response?.data || error.message);
        return [];
    }
}

async function testAddCoins(userId, amount) {
    try {
        console.log(`\nüí∞ –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ ${amount} –∫–æ–∏–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ID ${userId}...`);
        const response = await axios.post(
            `${API_URL}/admin/coins/add`,
            {
                userId: userId,
                amount: amount,
                reason: '–¢–µ—Å—Ç–æ–≤–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–∏–Ω–æ–≤'
            },
            {
                headers: { Authorization: `Bearer ${adminToken}` }
            }
        );
        console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ:', response.data);
        return true;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–∏–Ω–æ–≤:');
        console.error('  –°—Ç–∞—Ç—É—Å:', error.response?.status);
        console.error('  –î–∞–Ω–Ω—ã–µ:', error.response?.data);
        console.error('  –°–æ–æ–±—â–µ–Ω–∏–µ:', error.message);
        return false;
    }
}

async function testSubtractCoins(userId, amount) {
    try {
        console.log(`\nüí∏ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–∞–Ω–∏–µ ${amount} –∫–æ–∏–Ω–æ–≤ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID ${userId}...`);
        const response = await axios.post(
            `${API_URL}/admin/coins/subtract`,
            {
                userId: userId,
                amount: amount,
                reason: '–¢–µ—Å—Ç–æ–≤–æ–µ —Å–ø–∏—Å–∞–Ω–∏–µ –∫–æ–∏–Ω–æ–≤'
            },
            {
                headers: { Authorization: `Bearer ${adminToken}` }
            }
        );
        console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ:', response.data);
        return true;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–ø–∏—Å–∞–Ω–∏—è –∫–æ–∏–Ω–æ–≤:');
        console.error('  –°—Ç–∞—Ç—É—Å:', error.response?.status);
        console.error('  –î–∞–Ω–Ω—ã–µ:', error.response?.data);
        console.error('  –°–æ–æ–±—â–µ–Ω–∏–µ:', error.message);
        return false;
    }
}

async function runTests() {
    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...\n');
    console.log(`üìç API URL: ${API_URL}`);
    
    // –í—Ö–æ–¥–∏–º –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
    if (!await loginAsAdmin()) {
        console.log('\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä');
        return;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
    const employees = await getEmployees();
    if (employees.length === 0) {
        console.log('\n‚ùå –ù–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
        return;
    }
    
    // –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–≥–æ –Ω–µ-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    const testEmployee = employees.find(emp => emp.id !== 1) || employees[0];
    console.log(`\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ: ${testEmployee.full_name} (ID: ${testEmployee.id})`);
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–∏–Ω–æ–≤
    await testAddCoins(testEmployee.id, 100);
    
    // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–∞–Ω–∏–µ –∫–æ–∏–Ω–æ–≤
    await testSubtractCoins(testEmployee.id, 50);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–∞–Ω—Å
    await new Promise(resolve => setTimeout(resolve, 1000));
    const updatedEmployees = await getEmployees();
    const updatedEmployee = updatedEmployees.find(emp => emp.id === testEmployee.id);
    
    if (updatedEmployee) {
        console.log(`\nüìä –ò—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${updatedEmployee.coins} –∫–æ–∏–Ω–æ–≤`);
        const expectedBalance = testEmployee.coins + 100 - 50;
        if (updatedEmployee.coins === expectedBalance) {
            console.log('‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
        } else {
            console.log(`‚ùå –û–∂–∏–¥–∞–ª—Å—è –±–∞–ª–∞–Ω—Å ${expectedBalance}, –Ω–æ –ø–æ–ª—É—á–µ–Ω ${updatedEmployee.coins}`);
        }
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
runTests().catch(console.error);