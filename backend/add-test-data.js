require('dotenv').config();

async function addTestData() {
    const isPostgreSQL = process.env.NODE_ENV === 'production' && process.env.DATABASE_URL;
    
    if (!isPostgreSQL) {
        console.log('‚ö†Ô∏è  –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è PostgreSQL');
        process.exit(0);
    }
    
    const { dbAll, dbGet, dbRun } = require('./database/db-postgres');
    
    try {
        console.log('üé≤ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...\n');
        
        // –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—ã—Ö –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        const users = await dbAll('SELECT id, full_name FROM users WHERE is_active = true LIMIT 5');
        
        if (users.length === 0) {
            console.log('‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
            return;
        }
        
        console.log(`üë• –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.length}`);
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        for (const user of users) {
            // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é (–∑–∞—Ä–∞–±–æ—Ç–æ–∫)
            const earnAmount = Math.floor(Math.random() * 1000) + 500; // 500-1500
            await dbRun(`
                INSERT INTO transactions (to_user_id, amount, type, description, created_at)
                VALUES (?, ?, 'earn', ?, NOW())
            `, [user.id, earnAmount, `–¢–µ—Å—Ç–æ–≤–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –¥–ª—è ${user.full_name}`]);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await dbRun('UPDATE users SET balance = balance + ? WHERE id = ?', [earnAmount, user.id]);
            
            console.log(`‚úÖ ${user.full_name}: +${earnAmount} –¶–£–ü`);
            
            // –ò–Ω–æ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–∞—Ç—É
            if (Math.random() > 0.5) {
                const spendAmount = Math.floor(Math.random() * 200) + 50; // 50-250
                await dbRun(`
                    INSERT INTO transactions (to_user_id, amount, type, description, created_at)
                    VALUES (?, ?, 'spend', ?, NOW())
                `, [user.id, -spendAmount, `–¢–µ—Å—Ç–æ–≤–∞—è —Ç—Ä–∞—Ç–∞ –¥–ª—è ${user.full_name}`]);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                await dbRun('UPDATE users SET balance = balance - ? WHERE id = ?', [spendAmount, user.id]);
                
                console.log(`  üí∏ ${user.full_name}: -${spendAmount} –¶–£–ü`);
            }
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        console.log('\nüìä –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
        
        const totalEarned = await dbGet('SELECT COALESCE(SUM(amount), 0) as total FROM transactions WHERE amount > 0');
        console.log(`üí∞ –í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: ${totalEarned.total}`);
        
        const totalSpent = await dbGet('SELECT COALESCE(ABS(SUM(amount)), 0) as total FROM transactions WHERE amount < 0');
        console.log(`üí∏ –í—Å–µ–≥–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ: ${totalSpent.total}`);
        
        const totalEmployees = await dbGet('SELECT COUNT(*) as count FROM users WHERE is_active = true');
        console.log(`üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: ${totalEmployees.count}`);
        
        const totalTransactions = await dbGet('SELECT COUNT(*) as count FROM transactions');
        console.log(`üìä –í—Å–µ–≥–æ –æ–ø–µ—Ä–∞—Ü–∏–π: ${totalTransactions.count}`);
        
        console.log('\n‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã!');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞:', error);
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
    addTestData();
}

module.exports = addTestData;