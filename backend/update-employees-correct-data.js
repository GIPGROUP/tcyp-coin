require('dotenv').config();
const bcrypt = require('bcryptjs');

// –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –æ—Å—Ç–∞—Ç—å—Å—è (–∏–∑ txt —Ñ–∞–π–ª–∞ —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏)
const CORRECT_EMPLOYEES = [
    { email: "Gujovaod@gip.su", lastName: "–ì—É–∂–æ–≤–∞", firstName: "–û–ª–µ—Å—è", middleName: "–î–µ–Ω–∏—Å–æ–≤–Ω–∞", position: "–ò–Ω–∂–µ–Ω–µ—Ä-–∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä" },
    { email: "saukouma@gip.su", lastName: "–°–∞–≤–∫–æ–≤", firstName: "–ù–∏–∫–∏—Ç–∞", middleName: "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á", position: "–ò–Ω–∂–µ–Ω–µ—Ä" },
    { email: "firsovas@gip.su", lastName: "–§–∏—Ä—Å–æ–≤", firstName: "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä", middleName: "", position: "–ò–Ω–∂–µ–Ω–µ—Ä" },
    { email: "morozovada@gip.su", lastName: "–ú–æ—Ä–æ–∑–æ–≤–∞", firstName: "–î–∞—à–∞", middleName: "–ê–Ω–¥—Ä–µ–µ–≤–Ω–∞", position: "–ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä" },
    { email: "sadrtdinovayuyu@gip.su", lastName: "–°–∞–¥—Ä—Ç–¥–∏–Ω–æ–≤–∞", firstName: "–Æ–ª–∏—è", middleName: "", position: "–ú–µ–Ω–µ–¥–∂–µ—Ä" },
    { email: "manckovama@gip.su", lastName: "–ú–∞–Ω—å–∫–æ–≤–∞", firstName: "–ú–∞—Ä–∏–Ω–∞", middleName: "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–Ω–∞", position: "–ò–Ω–∂–µ–Ω–µ—Ä" },
    { email: "alexeevaar@gip.su", lastName: "–ê–ª–µ–∫—Å–µ–µ–≤–∞", firstName: "–ê—Ä–∏–Ω–∞", middleName: "", position: "–ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä" },
    { email: "maa@gip.su", lastName: "–ê–ª–∏–∫–∞–¥–∏–µ–≤", firstName: "–ú—É—Ä–∞–¥", middleName: "", position: "–ì–µ–Ω–µ—Ä–∞–ª—å–Ω—ã–π –¥–∏—Ä–µ–∫—Ç–æ—Ä" },
    { email: "kuprikovvn@gip.su", lastName: "–ö—É–ø—Ä–∏–∫–æ–≤", firstName: "–í–ª–∞–¥–∏–º–∏—Ä", middleName: "", position: "–ò–Ω–∂–µ–Ω–µ—Ä" },
    { email: "mingazovakr@gip.su", lastName: "–ú–∏–Ω–≥–∞–∑–æ–≤–∞", firstName: "–ö–∞–º–∏–ª–∞", middleName: "–†–∞–º–∏–ª–µ–≤–Ω–∞", position: "–ò–Ω–∂–µ–Ω–µ—Ä" },
    { email: "smirnovamu@gip.su", lastName: "–°–º–∏—Ä–Ω–æ–≤–∞", firstName: "–ú–∞—Ä–∏—è", middleName: "", position: "–ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä" },
    { email: "maizengerae@gip.su", lastName: "–ú–∞–π–∑–µ–Ω–≥–µ—Ä", firstName: "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä", middleName: "", position: "–ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä" },
    { email: "m.a.antonova@gip.su", lastName: "–ê–Ω—Ç–æ–Ω–æ–≤–∞", firstName: "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä–∞", middleName: "", position: "–ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä" },
    { email: "duseevgr@gip.su", lastName: "–î—É—Å–µ–µ–≤", firstName: "–ì–ª–µ–±", middleName: "", position: "–ì–ª–∞–≤–Ω—ã–π –∏–Ω–∂–µ–Ω–µ—Ä –ø—Ä–æ–µ–∫—Ç–∞" },
    { email: "rizhonkovaaa@gip.su", lastName: "–†—ã–∂–æ–Ω–∫–æ–≤–∞", firstName: "–ê–ª–∏–Ω–∞", middleName: "", position: "–ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä" },
    { email: "sfs@gip.su", lastName: "–®–∞–Ω–≥–∏–Ω", firstName: "–°–µ—Ä–≥–µ–π", middleName: "–§–µ–ª–∏–∫—Å–æ–≤–∏—á", position: "–ì–ª–∞–≤–Ω—ã–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç" },
    { email: "erushevkv@gip.su", lastName: "–ï—Ä—É—à–µ–≤", firstName: "–ö–∏—Ä–∏–ª–ª", middleName: "", position: "–ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä" },
    { email: "latfullinaa@gip.su", lastName: "–õ–∞—Ç—Ñ—É–ª–ª–∏–Ω", firstName: "–ê–ª–∏—Ö–∞–Ω", middleName: "–ê–π—Ä–∞—Ç–æ–≤–∏—á", position: "–ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä" },
    { email: "zemlikakovadd@gip.su", lastName: "–ó–µ–º–ª—è–∫–æ–≤–∞", firstName: "–î–∞—Ä—å—è", middleName: "", position: "–ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä" },
    { email: "feduloves@gip.su", lastName: "–§–µ–¥—É–ª–æ–≤", firstName: "–ï–≤–≥–µ–Ω–∏–π", middleName: "–°–µ—Ä–≥–µ–µ–≤–∏—á", position: "–ò–Ω–∂–µ–Ω–µ—Ä" },
    { email: "malyshevamj@gip.su", lastName: "–ú–∞–ª—ã—à–µ–≤–∞", firstName: "–ú–∞—Ä–∏–Ω–∞", middleName: "", position: "–ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä" },
    { email: "trublinskayaka@gip.su", lastName: "–¢—Ä—É–±–ª–∏–Ω—Å–∫–∞—è", firstName: "–ö—Å–µ–Ω–∏—è", middleName: "", position: "–ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä" },
    { email: "veselovama@gip.su", lastName: "–í–µ—Å–µ–ª–æ–≤–∞", firstName: "–ú–∞—Ä–∏–Ω–∞", middleName: "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–Ω–∞", position: "–ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä" },
    { email: "ritikovka@gip.su", lastName: "–†—ã—Ç–∏–∫–æ–≤", firstName: "–ö–∏—Ä–∏–ª–ª", middleName: "", position: "–ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä" },
    { email: "shvedchikovatv@gip.su", lastName: "–®–≤–µ–¥—á–∏–∫–æ–≤–∞", firstName: "–¢–∞—Ç—å—è–Ω–∞", middleName: "–í–ª–∞–¥–∏–º–∏—Ä–æ–≤–Ω–∞", position: "–ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä" },
    { email: "prozorovakd@gip.su", lastName: "–ü—Ä–æ–∑–æ—Ä–æ–≤–∞", firstName: "–ö—Å–µ–Ω–∏—è", middleName: "", position: "–ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä" },
    { email: "pa.smirnova@gip.su", lastName: "–°–º–∏—Ä–Ω–æ–≤–∞", firstName: "–ü–æ–ª–∏–Ω–∞", middleName: "–ê–ª–µ–∫—Å–µ–µ–≤–Ω–∞", position: "–ò–Ω–∂–µ–Ω–µ—Ä" },
    { email: "m.a.latyshev@gip.su", lastName: "–õ–∞—Ç—ã—à–µ–≤", firstName: "–ú–∞–∫—Å–∏–º", middleName: "–ê–Ω–¥—Ä–µ–µ–≤–∏—á", position: "–ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä" },
    { email: "ai.velikanova@gip.su", lastName: "–í–µ–ª–∏–∫–∞–Ω–æ–≤–∞", firstName: "–ê–Ω–Ω–∞", middleName: "–ò–≥–æ—Ä–µ–≤–Ω–∞", position: "–ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä" },
    { email: "yu.m.udalov@gip.su", lastName: "–£–¥–∞–ª–æ–≤", firstName: "–Æ—Ä–∏–π", middleName: "–ú–∏—Ö–∞–π–ª–æ–≤–∏—á", position: "–ò–Ω–∂–µ–Ω–µ—Ä" },
    { email: "i.a.ovchinnikov@gip.su", lastName: "–û–≤—á–∏–Ω–Ω–∏–∫–æ–≤", firstName: "–ò–≥–æ—Ä—å", middleName: "", position: "–ì–ª–∞–≤–Ω—ã–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä –ø—Ä–æ–µ–∫—Ç–∞" },
    { email: "d.m.udalov@gip.su", lastName: "–£–¥–∞–ª–æ–≤", firstName: "–î–º–∏—Ç—Ä–∏–π", middleName: "–ú–∏—Ö–∞–π–ª–æ–≤–∏—á", position: "–ò–Ω–∂–µ–Ω–µ—Ä" },
    { email: "a.s.shekhovtsov@gip.su", lastName: "–®–µ—Ö–æ–≤—Ü–æ–≤", firstName: "–ê–ª–µ–∫—Å–µ–π", middleName: "–°–µ—Ä–≥–µ–µ–≤–∏—á", position: "–ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä" },
    { email: "f.i.kochankin@gip.su", lastName: "–ö–æ—á–∞–Ω–∫–∏–Ω", firstName: "–§–æ–º–∞", middleName: "–ò–≤–∞–Ω–æ–≤–∏—á", position: "–ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä" },
    { email: "korepanovda@gip.su", lastName: "–ö–æ—Ä–µ–ø–∞–Ω–æ–≤", firstName: "–î–∞–Ω–∏–ª", middleName: "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á", position: "–ò–Ω–∂–µ–Ω–µ—Ä" },
    { email: "k.e.ishchenko@gip.su", lastName: "–ò—â–µ–Ω–∫–æ", firstName: "–ö—Ä–∏—Å—Ç–∏–Ω–∞", middleName: "–≠–¥—É–∞—Ä–¥–æ–≤–Ω–∞", position: "–ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä" },
    // –î–æ–±–∞–≤–ª—è–µ–º –°–∞–≤–∏–Ω–∫–∏–Ω—É –í–∞–ª–µ—Ä–∏—é –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    { email: "savinkinave@gip.su", lastName: "–°–∞–≤–∏–Ω–∫–∏–Ω–∞", firstName: "–í–∞–ª–µ—Ä–∏—è", middleName: "", position: "–ú–µ–Ω–µ–¥–∂–µ—Ä", isAdmin: true }
];

async function updateEmployeesData() {
    const isPostgreSQL = process.env.NODE_ENV === 'production' && process.env.DATABASE_URL;
    
    if (!isPostgreSQL) {
        console.log('‚ö†Ô∏è  –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è PostgreSQL');
        process.exit(0);
    }
    
    const { pool } = require('./database/db-postgres');
    
    try {
        console.log('üîß –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤...\n');
        
        const defaultPassword = 'tcyp2025';
        const hashedPassword = await bcrypt.hash(defaultPassword, 10);
        
        // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —Ç–µ–∫—É—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        const currentUsers = await pool.query('SELECT email FROM users WHERE email LIKE $1', ['%@gip.su']);
        const currentEmails = currentUsers.rows.map(u => u.email.toLowerCase());
        
        // –°–ø–∏—Å–æ–∫ email, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –æ—Å—Ç–∞—Ç—å—Å—è
        const keepEmails = CORRECT_EMPLOYEES.map(e => e.email.toLowerCase());
        
        // –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ –Ω–æ–≤–æ–º —Å–ø–∏—Å–∫–µ
        const emailsToDelete = currentEmails.filter(email => !keepEmails.includes(email));
        
        if (emailsToDelete.length > 0) {
            console.log(`üóëÔ∏è  –£–¥–∞–ª—è–µ–º ${emailsToDelete.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ...`);
            for (const email of emailsToDelete) {
                await pool.query('DELETE FROM users WHERE LOWER(email) = LOWER($1)', [email]);
                console.log(`  - –£–¥–∞–ª–µ–Ω: ${email}`);
            }
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Å–ø–∏—Å–∫–∞
        console.log('\nüìù –û–±–Ω–æ–≤–ª—è–µ–º/–¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...\n');
        
        for (const emp of CORRECT_EMPLOYEES) {
            const fullName = `${emp.lastName} ${emp.firstName} ${emp.middleName}`.trim();
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            const existing = await pool.query(
                'SELECT id FROM users WHERE LOWER(email) = LOWER($1)',
                [emp.email]
            );
            
            if (existing.rows.length > 0) {
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ
                await pool.query(`
                    UPDATE users 
                    SET full_name = $1, 
                        position = $2, 
                        password_hash = $3,
                        is_admin = $4,
                        is_active = true
                    WHERE LOWER(email) = LOWER($5)
                `, [fullName, emp.position, hashedPassword, emp.isAdmin || false, emp.email]);
                
                console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω: ${fullName} (${emp.email})`);
            } else {
                // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ
                await pool.query(`
                    INSERT INTO users (email, password_hash, full_name, position, department, is_admin, balance, is_active)
                    VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
                `, [
                    emp.email,
                    hashedPassword,
                    fullName,
                    emp.position,
                    '–¢–¶–£–ü',
                    emp.isAdmin || false,
                    0,
                    true
                ]);
                
                console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω: ${fullName} (${emp.email})`);
            }
        }
        
        // –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        console.log('\nüìä –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
        const finalCount = await pool.query('SELECT COUNT(*) as count FROM users WHERE email LIKE $1', ['%@gip.su']);
        console.log(`  - –í—Å–µ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ GIP: ${finalCount.rows[0].count}`);
        
        const adminCount = await pool.query('SELECT COUNT(*) as count FROM users WHERE is_admin = true');
        console.log(`  - –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: ${adminCount.rows[0].count}`);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        const admins = await pool.query('SELECT email, full_name FROM users WHERE is_admin = true');
        if (admins.rows.length > 0) {
            console.log('\nüëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã:');
            admins.rows.forEach(admin => {
                console.log(`  - ${admin.full_name} (${admin.email})`);
            });
        }
        
        console.log('\n‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!');
        console.log(`üîë –ü–∞—Ä–æ–ª—å –¥–ª—è –≤—Å–µ—Ö: ${defaultPassword}`);
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞:', error);
    } finally {
        await pool.end();
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º
updateEmployeesData();