const sqlite3 = require('sqlite3').verbose();
const path = require('path');
const bcrypt = require('bcrypt');
const fs = require('fs');

// –ü—É—Ç—å –∫ JSON —Ñ–∞–π–ª—É
const JSON_FILE_PATH = 'C:\\Users\\mankovama\\Downloads\\t.txt';

// –û–±—â–∏–π –ø–∞—Ä–æ–ª—å –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const DEFAULT_PASSWORD = 'tcyp2025';

// –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
const db = new sqlite3.Database(path.join(__dirname, 'database', 'tcyp_coins.db'));

async function importEmployees() {
    try {
        // –ß–∏—Ç–∞–µ–º JSON —Ñ–∞–π–ª
        console.log('üîç –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤...');
        const fileContent = fs.readFileSync(JSON_FILE_PATH, 'utf8');
        const employees = JSON.parse(fileContent);
        
        console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${employees.length} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞`);
        
        // –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å –æ–¥–∏–Ω —Ä–∞–∑
        const hashedPassword = await bcrypt.hash(DEFAULT_PASSWORD, 10);
        
        // –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–¥–∏–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é —Ç–µ–∫—É—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        console.log('\nüíæ –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é —Ç–µ–∫—É—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
        
        db.all('SELECT * FROM users', (err, backupUsers) => {
            if (err) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏:', err);
                return;
            }
            
            fs.writeFileSync('backup_users.json', JSON.stringify(backupUsers, null, 2));
            console.log(`‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ backup_users.json (${backupUsers.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)`);
            
            let importedCount = 0;
            let skippedCount = 0;
            let errorCount = 0;
            let adminFound = false;
            let processedCount = 0;
            
            console.log('\nüöÄ –ù–∞—á–∏–Ω–∞–µ–º –∏–º–ø–æ—Ä—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤...\n');
            
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
            employees.forEach((emp, index) => {
                try {
                    // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                    const employee = emp.employee || {};
                    const email = emp.email || emp.username || '';
                    const lastName = employee.last_name || employee.short_name || '';
                    const firstName = employee.first_name || emp.first_name || '';
                    const middleName = employee.middle_name || '';
                    const position = employee.position || '–°–æ—Ç—Ä—É–¥–Ω–∏–∫';
                    
                    // –§–æ—Ä–º–∏—Ä—É–µ–º –§–ò–û
                    const fullName = `${lastName} ${firstName} ${middleName}`.trim();
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –°–∞–≤–∏–Ω–∫–∏–Ω–∞ –í–∞–ª–µ—Ä–∏—è
                    const isAdmin = lastName.toLowerCase().includes('—Å–∞–≤–∏–Ω–∫–∏–Ω') && 
                                   firstName.toLowerCase().includes('–≤–∞–ª–µ—Ä–∏');
                    
                    if (isAdmin) {
                        adminFound = true;
                        console.log(`üîë –ù–∞–π–¥–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: ${fullName}`);
                    }
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                    db.get('SELECT id FROM users WHERE email = ?', [email], (err, existingUser) => {
                        if (err) {
                            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ ${email}:`, err.message);
                            errorCount++;
                            checkCompletion();
                            return;
                        }
                        
                        if (existingUser) {
                            if (skippedCount < 5) { // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5
                                console.log(`‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞–µ–º ${fullName} - email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${email}`);
                            }
                            skippedCount++;
                            checkCompletion();
                            return;
                        }
                        
                        // –í—Å—Ç–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        db.run(`
                            INSERT INTO users (email, password_hash, full_name, position, department, balance, is_admin, is_active)
                            VALUES (?, ?, ?, ?, ?, ?, ?, ?)
                        `, [
                            email,
                            hashedPassword,
                            fullName,
                            position,
                            '–¢–¶–£–ü', // –î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                            0, // –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
                            isAdmin ? 1 : 0,
                            1 // is_active
                        ], (err) => {
                            if (err) {
                                console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ ${fullName}:`, err.message);
                                errorCount++;
                            } else {
                                importedCount++;
                                if (importedCount % 10 === 0) {
                                    console.log(`‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${importedCount} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...`);
                                }
                            }
                            checkCompletion();
                        });
                    });
                    
                } catch (error) {
                    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø–∏—Å–∏ ${index + 1}:`, error.message);
                    errorCount++;
                    checkCompletion();
                }
            });
            
            // –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            function checkCompletion() {
                processedCount++;
                if (processedCount === employees.length) {
                    // –í—Å–µ –∑–∞–ø–∏—Å–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã
                    console.log('\n' + '='.repeat(50));
                    console.log('üìä –ò–ú–ü–û–†–¢ –ó–ê–í–ï–†–®–ï–ù');
                    console.log('='.repeat(50));
                    console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: ${importedCount} –Ω–æ–≤—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤`);
                    console.log(`‚ö†Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ (—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç): ${skippedCount}`);
                    console.log(`‚ùå –û—à–∏–±–æ–∫: ${errorCount}`);
                    console.log(`üîë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–∞–π–¥–µ–Ω: ${adminFound ? '–î–∞' : '–ù–µ—Ç'}`);
                    console.log(`\nüìß –í—Å–µ –Ω–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –≤–æ–π—Ç–∏ —Å –ø–∞—Ä–æ–ª–µ–º: ${DEFAULT_PASSWORD}`);
                    
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                    db.get('SELECT COUNT(*) as count FROM users', (err, result) => {
                        if (!err) {
                            console.log(`\nüìä –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ë–î: ${result.count}`);
                        }
                        
                        db.get('SELECT COUNT(*) as count FROM users WHERE is_admin = true', (err, result) => {
                            if (!err) {
                                console.log(`üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: ${result.count}`);
                            }
                            
                            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                            db.all('SELECT email, full_name FROM users ORDER BY id DESC LIMIT 5', (err, newUsers) => {
                                if (!err && newUsers.length > 0) {
                                    console.log('\nüÜï –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:');
                                    newUsers.forEach(user => {
                                        console.log(`  - ${user.full_name} (${user.email})`);
                                    });
                                }
                                
                                console.log('\n‚úÖ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
                                console.log('‚ö†Ô∏è  –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ backup_users.json');
                                
                                // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î
                                db.close();
                            });
                        });
                    });
                }
            }
        });
        
    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ:', error);
        db.close();
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∏–º–ø–æ—Ä—Ç
if (require.main === module) {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤...');
    console.log('‚ö†Ô∏è  –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ù–ï —É–¥–∞–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —Ç–æ–ª—å–∫–æ –¥–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã—Ö\n');
    importEmployees();
}

module.exports = { importEmployees };